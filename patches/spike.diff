diff --git a/fesvr/encoding.h b/fesvr/encoding.h
index c109ce1..afac052 100644
--- a/fesvr/encoding.h
+++ b/fesvr/encoding.h
@@ -352,6 +352,184 @@
 #define MASK_REMW  0xfe00707f
 #define MATCH_REMUW 0x200703b
 #define MASK_REMUW  0xfe00707f
+#define MATCH_ANDN 0x40007033
+#define MASK_ANDN  0xfe00707f
+#define MATCH_ORN 0x40006033
+#define MASK_ORN  0xfe00707f
+#define MATCH_XNOR 0x40004033
+#define MASK_XNOR  0xfe00707f
+#define MATCH_GREV 0x40001033
+#define MASK_GREV  0xfe00707f
+#define MATCH_SLO 0x20001033
+#define MASK_SLO  0xfe00707f
+#define MATCH_SRO 0x20005033
+#define MASK_SRO  0xfe00707f
+#define MATCH_ROL 0x60001033
+#define MASK_ROL  0xfe00707f
+#define MATCH_ROR 0x60005033
+#define MASK_ROR  0xfe00707f
+#define MATCH_SBSET 0x28001033
+#define MASK_SBSET  0xfe00707f
+#define MATCH_SBCLR 0x48001033
+#define MASK_SBCLR  0xfe00707f
+#define MATCH_SBINV 0x68001033
+#define MASK_SBINV  0xfe00707f
+#define MATCH_SBEXT 0x48005033
+#define MASK_SBEXT  0xfe00707f
+#define MATCH_GREVI 0x40001013
+#define MASK_GREVI  0xfc00707f
+#define MATCH_SLOI 0x20001013
+#define MASK_SLOI  0xfc00707f
+#define MATCH_SROI 0x20005013
+#define MASK_SROI  0xfc00707f
+#define MATCH_RORI 0x60005013
+#define MASK_RORI  0xfc00707f
+#define MATCH_SBSETI 0x28001013
+#define MASK_SBSETI  0xfc00707f
+#define MATCH_SBCLRI 0x48001013
+#define MASK_SBCLRI  0xfc00707f
+#define MATCH_SBINVI 0x68001013
+#define MASK_SBINVI  0xfc00707f
+#define MATCH_SBEXTI 0x48005013
+#define MASK_SBEXTI  0xfc00707f
+#define MATCH_CMIX 0x6001033
+#define MASK_CMIX  0x600707f
+#define MATCH_CMOV 0x6005033
+#define MASK_CMOV  0x600707f
+#define MATCH_FSL 0x4001033
+#define MASK_FSL  0x600707f
+#define MATCH_FSR 0x4005033
+#define MASK_FSR  0x600707f
+#define MATCH_FSRI 0x4005013
+#define MASK_FSRI  0x400707f
+#define MATCH_CLZ 0x60001013
+#define MASK_CLZ  0xfff0707f
+#define MATCH_CTZ 0x60101013
+#define MASK_CTZ  0xfff0707f
+#define MATCH_PCNT 0x60201013
+#define MASK_PCNT  0xfff0707f
+#define MATCH_CRC32_B 0x61001013
+#define MASK_CRC32_B  0xfff0707f
+#define MATCH_CRC32_H 0x61101013
+#define MASK_CRC32_H  0xfff0707f
+#define MATCH_CRC32_W 0x61201013
+#define MASK_CRC32_W  0xfff0707f
+#define MATCH_CRC32C_B 0x61801013
+#define MASK_CRC32C_B  0xfff0707f
+#define MATCH_CRC32C_H 0x61901013
+#define MASK_CRC32C_H  0xfff0707f
+#define MATCH_CRC32C_W 0x61a01013
+#define MASK_CRC32C_W  0xfff0707f
+#define MATCH_CLMUL 0xa001033
+#define MASK_CLMUL  0xfe00707f
+#define MATCH_CLMULHX 0xa002033
+#define MASK_CLMULHX  0xfe00707f
+#define MATCH_CLMULH 0xa003033
+#define MASK_CLMULH  0xfe00707f
+#define MATCH_MIN 0xa004033
+#define MASK_MIN  0xfe00707f
+#define MATCH_MAX 0xa005033
+#define MASK_MAX  0xfe00707f
+#define MATCH_MINU 0xa006033
+#define MASK_MINU  0xfe00707f
+#define MATCH_MAXU 0xa007033
+#define MASK_MAXU  0xfe00707f
+#define MATCH_SHFL 0x8001033
+#define MASK_SHFL  0xfe00707f
+#define MATCH_UNSHFL 0x8005033
+#define MASK_UNSHFL  0xfe00707f
+#define MATCH_BDEP 0x8002033
+#define MASK_BDEP  0xfe00707f
+#define MATCH_BEXT 0x8006033
+#define MASK_BEXT  0xfe00707f
+#define MATCH_PACK 0x8004033
+#define MASK_PACK  0xfe00707f
+#define MATCH_SHFLI 0x8001013
+#define MASK_SHFLI  0xfc00707f
+#define MATCH_UNSHFLI 0x8005013
+#define MASK_UNSHFLI  0xfc00707f
+#define MATCH_BMATFLIP 0x60301013
+#define MASK_BMATFLIP  0xfff0707f
+#define MATCH_CRC32_D 0x61301013
+#define MASK_CRC32_D  0xfff0707f
+#define MATCH_CRC32C_D 0x61b01013
+#define MASK_CRC32C_D  0xfff0707f
+#define MATCH_BMATOR 0x8003033
+#define MASK_BMATOR  0xfe00707f
+#define MATCH_BMATXOR 0x8007033
+#define MASK_BMATXOR  0xfe00707f
+#define MATCH_ADDIWU 0x401b
+#define MASK_ADDIWU  0x707f
+#define MATCH_SLLIU_W 0x800101b
+#define MASK_SLLIU_W  0xfc00707f
+#define MATCH_ADDWU 0xa00003b
+#define MASK_ADDWU  0xfe00707f
+#define MATCH_SUBWU 0x4a00003b
+#define MASK_SUBWU  0xfe00707f
+#define MATCH_ADDU_W 0x800003b
+#define MASK_ADDU_W  0xfe00707f
+#define MATCH_SUBU_W 0x4800003b
+#define MASK_SUBU_W  0xfe00707f
+#define MATCH_GREVW 0x4000103b
+#define MASK_GREVW  0xfe00707f
+#define MATCH_SLOW 0x2000103b
+#define MASK_SLOW  0xfe00707f
+#define MATCH_SROW 0x2000503b
+#define MASK_SROW  0xfe00707f
+#define MATCH_ROLW 0x6000103b
+#define MASK_ROLW  0xfe00707f
+#define MATCH_RORW 0x6000503b
+#define MASK_RORW  0xfe00707f
+#define MATCH_SBSETW 0x2800103b
+#define MASK_SBSETW  0xfe00707f
+#define MATCH_SBCLRW 0x4800103b
+#define MASK_SBCLRW  0xfe00707f
+#define MATCH_SBINVW 0x6800103b
+#define MASK_SBINVW  0xfe00707f
+#define MATCH_SBEXTW 0x4800503b
+#define MASK_SBEXTW  0xfe00707f
+#define MATCH_GREVIW 0x4000101b
+#define MASK_GREVIW  0xfe00707f
+#define MATCH_SLOIW 0x2000101b
+#define MASK_SLOIW  0xfe00707f
+#define MATCH_SROIW 0x2000501b
+#define MASK_SROIW  0xfe00707f
+#define MATCH_RORIW 0x6000501b
+#define MASK_RORIW  0xfe00707f
+#define MATCH_SBSETIW 0x2800101b
+#define MASK_SBSETIW  0xfe00707f
+#define MATCH_SBCLRIW 0x4800101b
+#define MASK_SBCLRIW  0xfe00707f
+#define MATCH_SBINVIW 0x6800101b
+#define MASK_SBINVIW  0xfe00707f
+#define MATCH_FSLW 0x400103b
+#define MASK_FSLW  0x600707f
+#define MATCH_FSRW 0x400503b
+#define MASK_FSRW  0x600707f
+#define MATCH_FSRIW 0x400501b
+#define MASK_FSRIW  0x600707f
+#define MATCH_CLZW 0x6000101b
+#define MASK_CLZW  0xfff0707f
+#define MATCH_CTZW 0x6010101b
+#define MASK_CTZW  0xfff0707f
+#define MATCH_PCNTW 0x6020101b
+#define MASK_PCNTW  0xfff0707f
+#define MATCH_CLMULW 0xa00103b
+#define MASK_CLMULW  0xfe00707f
+#define MATCH_CLMULHXW 0xa00203b
+#define MASK_CLMULHXW  0xfe00707f
+#define MATCH_CLMULHW 0xa00303b
+#define MASK_CLMULHW  0xfe00707f
+#define MATCH_SHFLW 0x800103b
+#define MASK_SHFLW  0xfe00707f
+#define MATCH_UNSHFLW 0x800503b
+#define MASK_UNSHFLW  0xfe00707f
+#define MATCH_BDEPW 0x800203b
+#define MASK_BDEPW  0xfe00707f
+#define MATCH_BEXTW 0x800603b
+#define MASK_BEXTW  0xfe00707f
+#define MATCH_PACKW 0x800403b
+#define MASK_PACKW  0xfe00707f
 #define MATCH_AMOADD_W 0x202f
 #define MASK_AMOADD_W  0xf800707f
 #define MATCH_AMOXOR_W 0x2000202f
@@ -1040,6 +1218,95 @@ DECLARE_INSN(divw, MATCH_DIVW, MASK_DIVW)
 DECLARE_INSN(divuw, MATCH_DIVUW, MASK_DIVUW)
 DECLARE_INSN(remw, MATCH_REMW, MASK_REMW)
 DECLARE_INSN(remuw, MATCH_REMUW, MASK_REMUW)
+DECLARE_INSN(andn, MATCH_ANDN, MASK_ANDN)
+DECLARE_INSN(orn, MATCH_ORN, MASK_ORN)
+DECLARE_INSN(xnor, MATCH_XNOR, MASK_XNOR)
+DECLARE_INSN(grev, MATCH_GREV, MASK_GREV)
+DECLARE_INSN(slo, MATCH_SLO, MASK_SLO)
+DECLARE_INSN(sro, MATCH_SRO, MASK_SRO)
+DECLARE_INSN(rol, MATCH_ROL, MASK_ROL)
+DECLARE_INSN(ror, MATCH_ROR, MASK_ROR)
+DECLARE_INSN(sbset, MATCH_SBSET, MASK_SBSET)
+DECLARE_INSN(sbclr, MATCH_SBCLR, MASK_SBCLR)
+DECLARE_INSN(sbinv, MATCH_SBINV, MASK_SBINV)
+DECLARE_INSN(sbext, MATCH_SBEXT, MASK_SBEXT)
+DECLARE_INSN(grevi, MATCH_GREVI, MASK_GREVI)
+DECLARE_INSN(sloi, MATCH_SLOI, MASK_SLOI)
+DECLARE_INSN(sroi, MATCH_SROI, MASK_SROI)
+DECLARE_INSN(rori, MATCH_RORI, MASK_RORI)
+DECLARE_INSN(sbseti, MATCH_SBSETI, MASK_SBSETI)
+DECLARE_INSN(sbclri, MATCH_SBCLRI, MASK_SBCLRI)
+DECLARE_INSN(sbinvi, MATCH_SBINVI, MASK_SBINVI)
+DECLARE_INSN(sbexti, MATCH_SBEXTI, MASK_SBEXTI)
+DECLARE_INSN(cmix, MATCH_CMIX, MASK_CMIX)
+DECLARE_INSN(cmov, MATCH_CMOV, MASK_CMOV)
+DECLARE_INSN(fsl, MATCH_FSL, MASK_FSL)
+DECLARE_INSN(fsr, MATCH_FSR, MASK_FSR)
+DECLARE_INSN(fsri, MATCH_FSRI, MASK_FSRI)
+DECLARE_INSN(clz, MATCH_CLZ, MASK_CLZ)
+DECLARE_INSN(ctz, MATCH_CTZ, MASK_CTZ)
+DECLARE_INSN(pcnt, MATCH_PCNT, MASK_PCNT)
+DECLARE_INSN(crc32_b, MATCH_CRC32_B, MASK_CRC32_B)
+DECLARE_INSN(crc32_h, MATCH_CRC32_H, MASK_CRC32_H)
+DECLARE_INSN(crc32_w, MATCH_CRC32_W, MASK_CRC32_W)
+DECLARE_INSN(crc32c_b, MATCH_CRC32C_B, MASK_CRC32C_B)
+DECLARE_INSN(crc32c_h, MATCH_CRC32C_H, MASK_CRC32C_H)
+DECLARE_INSN(crc32c_w, MATCH_CRC32C_W, MASK_CRC32C_W)
+DECLARE_INSN(clmul, MATCH_CLMUL, MASK_CLMUL)
+DECLARE_INSN(clmulhx, MATCH_CLMULHX, MASK_CLMULHX)
+DECLARE_INSN(clmulh, MATCH_CLMULH, MASK_CLMULH)
+DECLARE_INSN(min, MATCH_MIN, MASK_MIN)
+DECLARE_INSN(max, MATCH_MAX, MASK_MAX)
+DECLARE_INSN(minu, MATCH_MINU, MASK_MINU)
+DECLARE_INSN(maxu, MATCH_MAXU, MASK_MAXU)
+DECLARE_INSN(shfl, MATCH_SHFL, MASK_SHFL)
+DECLARE_INSN(unshfl, MATCH_UNSHFL, MASK_UNSHFL)
+DECLARE_INSN(bdep, MATCH_BDEP, MASK_BDEP)
+DECLARE_INSN(bext, MATCH_BEXT, MASK_BEXT)
+DECLARE_INSN(pack, MATCH_PACK, MASK_PACK)
+DECLARE_INSN(shfli, MATCH_SHFLI, MASK_SHFLI)
+DECLARE_INSN(unshfli, MATCH_UNSHFLI, MASK_UNSHFLI)
+DECLARE_INSN(bmatflip, MATCH_BMATFLIP, MASK_BMATFLIP)
+DECLARE_INSN(crc32_d, MATCH_CRC32_D, MASK_CRC32_D)
+DECLARE_INSN(crc32c_d, MATCH_CRC32C_D, MASK_CRC32C_D)
+DECLARE_INSN(bmator, MATCH_BMATOR, MASK_BMATOR)
+DECLARE_INSN(bmatxor, MATCH_BMATXOR, MASK_BMATXOR)
+DECLARE_INSN(addiwu, MATCH_ADDIWU, MASK_ADDIWU)
+DECLARE_INSN(slliu_w, MATCH_SLLIU_W, MASK_SLLIU_W)
+DECLARE_INSN(addwu, MATCH_ADDWU, MASK_ADDWU)
+DECLARE_INSN(subwu, MATCH_SUBWU, MASK_SUBWU)
+DECLARE_INSN(addu_w, MATCH_ADDU_W, MASK_ADDU_W)
+DECLARE_INSN(subu_w, MATCH_SUBU_W, MASK_SUBU_W)
+DECLARE_INSN(grevw, MATCH_GREVW, MASK_GREVW)
+DECLARE_INSN(slow, MATCH_SLOW, MASK_SLOW)
+DECLARE_INSN(srow, MATCH_SROW, MASK_SROW)
+DECLARE_INSN(rolw, MATCH_ROLW, MASK_ROLW)
+DECLARE_INSN(rorw, MATCH_RORW, MASK_RORW)
+DECLARE_INSN(sbsetw, MATCH_SBSETW, MASK_SBSETW)
+DECLARE_INSN(sbclrw, MATCH_SBCLRW, MASK_SBCLRW)
+DECLARE_INSN(sbinvw, MATCH_SBINVW, MASK_SBINVW)
+DECLARE_INSN(sbextw, MATCH_SBEXTW, MASK_SBEXTW)
+DECLARE_INSN(greviw, MATCH_GREVIW, MASK_GREVIW)
+DECLARE_INSN(sloiw, MATCH_SLOIW, MASK_SLOIW)
+DECLARE_INSN(sroiw, MATCH_SROIW, MASK_SROIW)
+DECLARE_INSN(roriw, MATCH_RORIW, MASK_RORIW)
+DECLARE_INSN(sbsetiw, MATCH_SBSETIW, MASK_SBSETIW)
+DECLARE_INSN(sbclriw, MATCH_SBCLRIW, MASK_SBCLRIW)
+DECLARE_INSN(sbinviw, MATCH_SBINVIW, MASK_SBINVIW)
+DECLARE_INSN(fslw, MATCH_FSLW, MASK_FSLW)
+DECLARE_INSN(fsrw, MATCH_FSRW, MASK_FSRW)
+DECLARE_INSN(fsriw, MATCH_FSRIW, MASK_FSRIW)
+DECLARE_INSN(clzw, MATCH_CLZW, MASK_CLZW)
+DECLARE_INSN(ctzw, MATCH_CTZW, MASK_CTZW)
+DECLARE_INSN(pcntw, MATCH_PCNTW, MASK_PCNTW)
+DECLARE_INSN(clmulw, MATCH_CLMULW, MASK_CLMULW)
+DECLARE_INSN(clmulhxw, MATCH_CLMULHXW, MASK_CLMULHXW)
+DECLARE_INSN(clmulhw, MATCH_CLMULHW, MASK_CLMULHW)
+DECLARE_INSN(shflw, MATCH_SHFLW, MASK_SHFLW)
+DECLARE_INSN(unshflw, MATCH_UNSHFLW, MASK_UNSHFLW)
+DECLARE_INSN(bdepw, MATCH_BDEPW, MASK_BDEPW)
+DECLARE_INSN(bextw, MATCH_BEXTW, MASK_BEXTW)
+DECLARE_INSN(packw, MATCH_PACKW, MASK_PACKW)
 DECLARE_INSN(amoadd_w, MATCH_AMOADD_W, MASK_AMOADD_W)
 DECLARE_INSN(amoxor_w, MATCH_AMOXOR_W, MASK_AMOXOR_W)
 DECLARE_INSN(amoor_w, MATCH_AMOOR_W, MASK_AMOOR_W)
diff --git a/riscv/decode.h b/riscv/decode.h
index 3fa78c1..78e78da 100644
--- a/riscv/decode.h
+++ b/riscv/decode.h
@@ -132,6 +132,7 @@ private:
 #define READ_FREG(reg) STATE.FPR[reg]
 #define RS1 READ_REG(insn.rs1())
 #define RS2 READ_REG(insn.rs2())
+#define RS3 READ_REG(insn.rs3())
 #define WRITE_RD(value) WRITE_REG(insn.rd(), value)
 
 #ifndef RISCV_ENABLE_COMMITLOG
diff --git a/riscv/encoding.h b/riscv/encoding.h
index c109ce1..afac052 100644
--- a/riscv/encoding.h
+++ b/riscv/encoding.h
@@ -352,6 +352,184 @@
 #define MASK_REMW  0xfe00707f
 #define MATCH_REMUW 0x200703b
 #define MASK_REMUW  0xfe00707f
+#define MATCH_ANDN 0x40007033
+#define MASK_ANDN  0xfe00707f
+#define MATCH_ORN 0x40006033
+#define MASK_ORN  0xfe00707f
+#define MATCH_XNOR 0x40004033
+#define MASK_XNOR  0xfe00707f
+#define MATCH_GREV 0x40001033
+#define MASK_GREV  0xfe00707f
+#define MATCH_SLO 0x20001033
+#define MASK_SLO  0xfe00707f
+#define MATCH_SRO 0x20005033
+#define MASK_SRO  0xfe00707f
+#define MATCH_ROL 0x60001033
+#define MASK_ROL  0xfe00707f
+#define MATCH_ROR 0x60005033
+#define MASK_ROR  0xfe00707f
+#define MATCH_SBSET 0x28001033
+#define MASK_SBSET  0xfe00707f
+#define MATCH_SBCLR 0x48001033
+#define MASK_SBCLR  0xfe00707f
+#define MATCH_SBINV 0x68001033
+#define MASK_SBINV  0xfe00707f
+#define MATCH_SBEXT 0x48005033
+#define MASK_SBEXT  0xfe00707f
+#define MATCH_GREVI 0x40001013
+#define MASK_GREVI  0xfc00707f
+#define MATCH_SLOI 0x20001013
+#define MASK_SLOI  0xfc00707f
+#define MATCH_SROI 0x20005013
+#define MASK_SROI  0xfc00707f
+#define MATCH_RORI 0x60005013
+#define MASK_RORI  0xfc00707f
+#define MATCH_SBSETI 0x28001013
+#define MASK_SBSETI  0xfc00707f
+#define MATCH_SBCLRI 0x48001013
+#define MASK_SBCLRI  0xfc00707f
+#define MATCH_SBINVI 0x68001013
+#define MASK_SBINVI  0xfc00707f
+#define MATCH_SBEXTI 0x48005013
+#define MASK_SBEXTI  0xfc00707f
+#define MATCH_CMIX 0x6001033
+#define MASK_CMIX  0x600707f
+#define MATCH_CMOV 0x6005033
+#define MASK_CMOV  0x600707f
+#define MATCH_FSL 0x4001033
+#define MASK_FSL  0x600707f
+#define MATCH_FSR 0x4005033
+#define MASK_FSR  0x600707f
+#define MATCH_FSRI 0x4005013
+#define MASK_FSRI  0x400707f
+#define MATCH_CLZ 0x60001013
+#define MASK_CLZ  0xfff0707f
+#define MATCH_CTZ 0x60101013
+#define MASK_CTZ  0xfff0707f
+#define MATCH_PCNT 0x60201013
+#define MASK_PCNT  0xfff0707f
+#define MATCH_CRC32_B 0x61001013
+#define MASK_CRC32_B  0xfff0707f
+#define MATCH_CRC32_H 0x61101013
+#define MASK_CRC32_H  0xfff0707f
+#define MATCH_CRC32_W 0x61201013
+#define MASK_CRC32_W  0xfff0707f
+#define MATCH_CRC32C_B 0x61801013
+#define MASK_CRC32C_B  0xfff0707f
+#define MATCH_CRC32C_H 0x61901013
+#define MASK_CRC32C_H  0xfff0707f
+#define MATCH_CRC32C_W 0x61a01013
+#define MASK_CRC32C_W  0xfff0707f
+#define MATCH_CLMUL 0xa001033
+#define MASK_CLMUL  0xfe00707f
+#define MATCH_CLMULHX 0xa002033
+#define MASK_CLMULHX  0xfe00707f
+#define MATCH_CLMULH 0xa003033
+#define MASK_CLMULH  0xfe00707f
+#define MATCH_MIN 0xa004033
+#define MASK_MIN  0xfe00707f
+#define MATCH_MAX 0xa005033
+#define MASK_MAX  0xfe00707f
+#define MATCH_MINU 0xa006033
+#define MASK_MINU  0xfe00707f
+#define MATCH_MAXU 0xa007033
+#define MASK_MAXU  0xfe00707f
+#define MATCH_SHFL 0x8001033
+#define MASK_SHFL  0xfe00707f
+#define MATCH_UNSHFL 0x8005033
+#define MASK_UNSHFL  0xfe00707f
+#define MATCH_BDEP 0x8002033
+#define MASK_BDEP  0xfe00707f
+#define MATCH_BEXT 0x8006033
+#define MASK_BEXT  0xfe00707f
+#define MATCH_PACK 0x8004033
+#define MASK_PACK  0xfe00707f
+#define MATCH_SHFLI 0x8001013
+#define MASK_SHFLI  0xfc00707f
+#define MATCH_UNSHFLI 0x8005013
+#define MASK_UNSHFLI  0xfc00707f
+#define MATCH_BMATFLIP 0x60301013
+#define MASK_BMATFLIP  0xfff0707f
+#define MATCH_CRC32_D 0x61301013
+#define MASK_CRC32_D  0xfff0707f
+#define MATCH_CRC32C_D 0x61b01013
+#define MASK_CRC32C_D  0xfff0707f
+#define MATCH_BMATOR 0x8003033
+#define MASK_BMATOR  0xfe00707f
+#define MATCH_BMATXOR 0x8007033
+#define MASK_BMATXOR  0xfe00707f
+#define MATCH_ADDIWU 0x401b
+#define MASK_ADDIWU  0x707f
+#define MATCH_SLLIU_W 0x800101b
+#define MASK_SLLIU_W  0xfc00707f
+#define MATCH_ADDWU 0xa00003b
+#define MASK_ADDWU  0xfe00707f
+#define MATCH_SUBWU 0x4a00003b
+#define MASK_SUBWU  0xfe00707f
+#define MATCH_ADDU_W 0x800003b
+#define MASK_ADDU_W  0xfe00707f
+#define MATCH_SUBU_W 0x4800003b
+#define MASK_SUBU_W  0xfe00707f
+#define MATCH_GREVW 0x4000103b
+#define MASK_GREVW  0xfe00707f
+#define MATCH_SLOW 0x2000103b
+#define MASK_SLOW  0xfe00707f
+#define MATCH_SROW 0x2000503b
+#define MASK_SROW  0xfe00707f
+#define MATCH_ROLW 0x6000103b
+#define MASK_ROLW  0xfe00707f
+#define MATCH_RORW 0x6000503b
+#define MASK_RORW  0xfe00707f
+#define MATCH_SBSETW 0x2800103b
+#define MASK_SBSETW  0xfe00707f
+#define MATCH_SBCLRW 0x4800103b
+#define MASK_SBCLRW  0xfe00707f
+#define MATCH_SBINVW 0x6800103b
+#define MASK_SBINVW  0xfe00707f
+#define MATCH_SBEXTW 0x4800503b
+#define MASK_SBEXTW  0xfe00707f
+#define MATCH_GREVIW 0x4000101b
+#define MASK_GREVIW  0xfe00707f
+#define MATCH_SLOIW 0x2000101b
+#define MASK_SLOIW  0xfe00707f
+#define MATCH_SROIW 0x2000501b
+#define MASK_SROIW  0xfe00707f
+#define MATCH_RORIW 0x6000501b
+#define MASK_RORIW  0xfe00707f
+#define MATCH_SBSETIW 0x2800101b
+#define MASK_SBSETIW  0xfe00707f
+#define MATCH_SBCLRIW 0x4800101b
+#define MASK_SBCLRIW  0xfe00707f
+#define MATCH_SBINVIW 0x6800101b
+#define MASK_SBINVIW  0xfe00707f
+#define MATCH_FSLW 0x400103b
+#define MASK_FSLW  0x600707f
+#define MATCH_FSRW 0x400503b
+#define MASK_FSRW  0x600707f
+#define MATCH_FSRIW 0x400501b
+#define MASK_FSRIW  0x600707f
+#define MATCH_CLZW 0x6000101b
+#define MASK_CLZW  0xfff0707f
+#define MATCH_CTZW 0x6010101b
+#define MASK_CTZW  0xfff0707f
+#define MATCH_PCNTW 0x6020101b
+#define MASK_PCNTW  0xfff0707f
+#define MATCH_CLMULW 0xa00103b
+#define MASK_CLMULW  0xfe00707f
+#define MATCH_CLMULHXW 0xa00203b
+#define MASK_CLMULHXW  0xfe00707f
+#define MATCH_CLMULHW 0xa00303b
+#define MASK_CLMULHW  0xfe00707f
+#define MATCH_SHFLW 0x800103b
+#define MASK_SHFLW  0xfe00707f
+#define MATCH_UNSHFLW 0x800503b
+#define MASK_UNSHFLW  0xfe00707f
+#define MATCH_BDEPW 0x800203b
+#define MASK_BDEPW  0xfe00707f
+#define MATCH_BEXTW 0x800603b
+#define MASK_BEXTW  0xfe00707f
+#define MATCH_PACKW 0x800403b
+#define MASK_PACKW  0xfe00707f
 #define MATCH_AMOADD_W 0x202f
 #define MASK_AMOADD_W  0xf800707f
 #define MATCH_AMOXOR_W 0x2000202f
@@ -1040,6 +1218,95 @@ DECLARE_INSN(divw, MATCH_DIVW, MASK_DIVW)
 DECLARE_INSN(divuw, MATCH_DIVUW, MASK_DIVUW)
 DECLARE_INSN(remw, MATCH_REMW, MASK_REMW)
 DECLARE_INSN(remuw, MATCH_REMUW, MASK_REMUW)
+DECLARE_INSN(andn, MATCH_ANDN, MASK_ANDN)
+DECLARE_INSN(orn, MATCH_ORN, MASK_ORN)
+DECLARE_INSN(xnor, MATCH_XNOR, MASK_XNOR)
+DECLARE_INSN(grev, MATCH_GREV, MASK_GREV)
+DECLARE_INSN(slo, MATCH_SLO, MASK_SLO)
+DECLARE_INSN(sro, MATCH_SRO, MASK_SRO)
+DECLARE_INSN(rol, MATCH_ROL, MASK_ROL)
+DECLARE_INSN(ror, MATCH_ROR, MASK_ROR)
+DECLARE_INSN(sbset, MATCH_SBSET, MASK_SBSET)
+DECLARE_INSN(sbclr, MATCH_SBCLR, MASK_SBCLR)
+DECLARE_INSN(sbinv, MATCH_SBINV, MASK_SBINV)
+DECLARE_INSN(sbext, MATCH_SBEXT, MASK_SBEXT)
+DECLARE_INSN(grevi, MATCH_GREVI, MASK_GREVI)
+DECLARE_INSN(sloi, MATCH_SLOI, MASK_SLOI)
+DECLARE_INSN(sroi, MATCH_SROI, MASK_SROI)
+DECLARE_INSN(rori, MATCH_RORI, MASK_RORI)
+DECLARE_INSN(sbseti, MATCH_SBSETI, MASK_SBSETI)
+DECLARE_INSN(sbclri, MATCH_SBCLRI, MASK_SBCLRI)
+DECLARE_INSN(sbinvi, MATCH_SBINVI, MASK_SBINVI)
+DECLARE_INSN(sbexti, MATCH_SBEXTI, MASK_SBEXTI)
+DECLARE_INSN(cmix, MATCH_CMIX, MASK_CMIX)
+DECLARE_INSN(cmov, MATCH_CMOV, MASK_CMOV)
+DECLARE_INSN(fsl, MATCH_FSL, MASK_FSL)
+DECLARE_INSN(fsr, MATCH_FSR, MASK_FSR)
+DECLARE_INSN(fsri, MATCH_FSRI, MASK_FSRI)
+DECLARE_INSN(clz, MATCH_CLZ, MASK_CLZ)
+DECLARE_INSN(ctz, MATCH_CTZ, MASK_CTZ)
+DECLARE_INSN(pcnt, MATCH_PCNT, MASK_PCNT)
+DECLARE_INSN(crc32_b, MATCH_CRC32_B, MASK_CRC32_B)
+DECLARE_INSN(crc32_h, MATCH_CRC32_H, MASK_CRC32_H)
+DECLARE_INSN(crc32_w, MATCH_CRC32_W, MASK_CRC32_W)
+DECLARE_INSN(crc32c_b, MATCH_CRC32C_B, MASK_CRC32C_B)
+DECLARE_INSN(crc32c_h, MATCH_CRC32C_H, MASK_CRC32C_H)
+DECLARE_INSN(crc32c_w, MATCH_CRC32C_W, MASK_CRC32C_W)
+DECLARE_INSN(clmul, MATCH_CLMUL, MASK_CLMUL)
+DECLARE_INSN(clmulhx, MATCH_CLMULHX, MASK_CLMULHX)
+DECLARE_INSN(clmulh, MATCH_CLMULH, MASK_CLMULH)
+DECLARE_INSN(min, MATCH_MIN, MASK_MIN)
+DECLARE_INSN(max, MATCH_MAX, MASK_MAX)
+DECLARE_INSN(minu, MATCH_MINU, MASK_MINU)
+DECLARE_INSN(maxu, MATCH_MAXU, MASK_MAXU)
+DECLARE_INSN(shfl, MATCH_SHFL, MASK_SHFL)
+DECLARE_INSN(unshfl, MATCH_UNSHFL, MASK_UNSHFL)
+DECLARE_INSN(bdep, MATCH_BDEP, MASK_BDEP)
+DECLARE_INSN(bext, MATCH_BEXT, MASK_BEXT)
+DECLARE_INSN(pack, MATCH_PACK, MASK_PACK)
+DECLARE_INSN(shfli, MATCH_SHFLI, MASK_SHFLI)
+DECLARE_INSN(unshfli, MATCH_UNSHFLI, MASK_UNSHFLI)
+DECLARE_INSN(bmatflip, MATCH_BMATFLIP, MASK_BMATFLIP)
+DECLARE_INSN(crc32_d, MATCH_CRC32_D, MASK_CRC32_D)
+DECLARE_INSN(crc32c_d, MATCH_CRC32C_D, MASK_CRC32C_D)
+DECLARE_INSN(bmator, MATCH_BMATOR, MASK_BMATOR)
+DECLARE_INSN(bmatxor, MATCH_BMATXOR, MASK_BMATXOR)
+DECLARE_INSN(addiwu, MATCH_ADDIWU, MASK_ADDIWU)
+DECLARE_INSN(slliu_w, MATCH_SLLIU_W, MASK_SLLIU_W)
+DECLARE_INSN(addwu, MATCH_ADDWU, MASK_ADDWU)
+DECLARE_INSN(subwu, MATCH_SUBWU, MASK_SUBWU)
+DECLARE_INSN(addu_w, MATCH_ADDU_W, MASK_ADDU_W)
+DECLARE_INSN(subu_w, MATCH_SUBU_W, MASK_SUBU_W)
+DECLARE_INSN(grevw, MATCH_GREVW, MASK_GREVW)
+DECLARE_INSN(slow, MATCH_SLOW, MASK_SLOW)
+DECLARE_INSN(srow, MATCH_SROW, MASK_SROW)
+DECLARE_INSN(rolw, MATCH_ROLW, MASK_ROLW)
+DECLARE_INSN(rorw, MATCH_RORW, MASK_RORW)
+DECLARE_INSN(sbsetw, MATCH_SBSETW, MASK_SBSETW)
+DECLARE_INSN(sbclrw, MATCH_SBCLRW, MASK_SBCLRW)
+DECLARE_INSN(sbinvw, MATCH_SBINVW, MASK_SBINVW)
+DECLARE_INSN(sbextw, MATCH_SBEXTW, MASK_SBEXTW)
+DECLARE_INSN(greviw, MATCH_GREVIW, MASK_GREVIW)
+DECLARE_INSN(sloiw, MATCH_SLOIW, MASK_SLOIW)
+DECLARE_INSN(sroiw, MATCH_SROIW, MASK_SROIW)
+DECLARE_INSN(roriw, MATCH_RORIW, MASK_RORIW)
+DECLARE_INSN(sbsetiw, MATCH_SBSETIW, MASK_SBSETIW)
+DECLARE_INSN(sbclriw, MATCH_SBCLRIW, MASK_SBCLRIW)
+DECLARE_INSN(sbinviw, MATCH_SBINVIW, MASK_SBINVIW)
+DECLARE_INSN(fslw, MATCH_FSLW, MASK_FSLW)
+DECLARE_INSN(fsrw, MATCH_FSRW, MASK_FSRW)
+DECLARE_INSN(fsriw, MATCH_FSRIW, MASK_FSRIW)
+DECLARE_INSN(clzw, MATCH_CLZW, MASK_CLZW)
+DECLARE_INSN(ctzw, MATCH_CTZW, MASK_CTZW)
+DECLARE_INSN(pcntw, MATCH_PCNTW, MASK_PCNTW)
+DECLARE_INSN(clmulw, MATCH_CLMULW, MASK_CLMULW)
+DECLARE_INSN(clmulhxw, MATCH_CLMULHXW, MASK_CLMULHXW)
+DECLARE_INSN(clmulhw, MATCH_CLMULHW, MASK_CLMULHW)
+DECLARE_INSN(shflw, MATCH_SHFLW, MASK_SHFLW)
+DECLARE_INSN(unshflw, MATCH_UNSHFLW, MASK_UNSHFLW)
+DECLARE_INSN(bdepw, MATCH_BDEPW, MASK_BDEPW)
+DECLARE_INSN(bextw, MATCH_BEXTW, MASK_BEXTW)
+DECLARE_INSN(packw, MATCH_PACKW, MASK_PACKW)
 DECLARE_INSN(amoadd_w, MATCH_AMOADD_W, MASK_AMOADD_W)
 DECLARE_INSN(amoxor_w, MATCH_AMOXOR_W, MASK_AMOXOR_W)
 DECLARE_INSN(amoor_w, MATCH_AMOOR_W, MASK_AMOOR_W)
diff --git a/riscv/insns/addiwu.h b/riscv/insns/addiwu.h
index e69de29..5ba1427 100644
--- a/riscv/insns/addiwu.h
+++ b/riscv/insns/addiwu.h
@@ -0,0 +1,3 @@
+require_rv64;
+require_extension('B');
+WRITE_RD(zext32(insn.i_imm() + RS1));
diff --git a/riscv/insns/addu_w.h b/riscv/insns/addu_w.h
index e69de29..4c34449 100644
--- a/riscv/insns/addu_w.h
+++ b/riscv/insns/addu_w.h
@@ -0,0 +1,3 @@
+require_rv64;
+require_extension('B');
+WRITE_RD(sext_xlen(RS1 + zext32(RS2)));
diff --git a/riscv/insns/addwu.h b/riscv/insns/addwu.h
index e69de29..cc40683 100644
--- a/riscv/insns/addwu.h
+++ b/riscv/insns/addwu.h
@@ -0,0 +1,3 @@
+require_rv64;
+require_extension('B');
+WRITE_RD(zext32(RS1 + RS2));
diff --git a/riscv/insns/andn.h b/riscv/insns/andn.h
index e69de29..4582aac 100644
--- a/riscv/insns/andn.h
+++ b/riscv/insns/andn.h
@@ -0,0 +1,2 @@
+require_extension('B');
+WRITE_RD(RS1 & ~RS2);
diff --git a/riscv/insns/bdep.h b/riscv/insns/bdep.h
index e69de29..059a1cd 100644
--- a/riscv/insns/bdep.h
+++ b/riscv/insns/bdep.h
@@ -0,0 +1,9 @@
+require_extension('B');
+uint64_t c = 0, i = 0, data = zext_xlen(RS1), mask = zext_xlen(RS2);
+while (mask) {
+	uint64_t b = mask & ~((mask | (mask-1)) + 1);
+	c |= (data << (__builtin_ctzl(b) - i)) & b;
+	i += __builtin_popcountl(b);
+	mask -= b;
+}
+WRITE_RD(sext_xlen(c));
diff --git a/riscv/insns/bdepw.h b/riscv/insns/bdepw.h
index e69de29..8f013c5 100644
--- a/riscv/insns/bdepw.h
+++ b/riscv/insns/bdepw.h
@@ -0,0 +1,9 @@
+require_extension('B');
+uint64_t c = 0, i = 0, data = zext32(RS1), mask = zext32(RS2);
+while (mask) {
+	uint64_t b = mask & ~((mask | (mask-1)) + 1);
+	c |= (data << (__builtin_ctzl(b) - i)) & b;
+	i += __builtin_popcountl(b);
+	mask -= b;
+}
+WRITE_RD(sext32(c));
diff --git a/riscv/insns/bext.h b/riscv/insns/bext.h
index e69de29..50d9bb2 100644
--- a/riscv/insns/bext.h
+++ b/riscv/insns/bext.h
@@ -0,0 +1,9 @@
+require_extension('B');
+uint64_t c = 0, i = 0, data = zext_xlen(RS1), mask = zext_xlen(RS2);
+while (mask) {
+	uint64_t b = mask & ~((mask | (mask-1)) + 1);
+	c |= (data & b) >> (__builtin_ctzl(b) - i);
+	i += __builtin_popcountl(b);
+	mask -= b;
+}
+WRITE_RD(sext_xlen(c));
diff --git a/riscv/insns/bextw.h b/riscv/insns/bextw.h
index e69de29..2bc9a5f 100644
--- a/riscv/insns/bextw.h
+++ b/riscv/insns/bextw.h
@@ -0,0 +1,9 @@
+require_extension('B');
+uint64_t c = 0, i = 0, data = zext32(RS1), mask = zext32(RS2);
+while (mask) {
+	uint64_t b = mask & ~((mask | (mask-1)) + 1);
+	c |= (data & b) >> (__builtin_ctzl(b) - i);
+	i += __builtin_popcountl(b);
+	mask -= b;
+}
+WRITE_RD(sext32(c));
diff --git a/riscv/insns/bmatflip.h b/riscv/insns/bmatflip.h
index e69de29..c37937f 100644
--- a/riscv/insns/bmatflip.h
+++ b/riscv/insns/bmatflip.h
@@ -0,0 +1,3 @@
+require_rv64;
+require_extension('B');
+abort(); // FIXME
diff --git a/riscv/insns/bmator.h b/riscv/insns/bmator.h
index e69de29..c37937f 100644
--- a/riscv/insns/bmator.h
+++ b/riscv/insns/bmator.h
@@ -0,0 +1,3 @@
+require_rv64;
+require_extension('B');
+abort(); // FIXME
diff --git a/riscv/insns/bmatxor.h b/riscv/insns/bmatxor.h
index e69de29..c37937f 100644
--- a/riscv/insns/bmatxor.h
+++ b/riscv/insns/bmatxor.h
@@ -0,0 +1,3 @@
+require_rv64;
+require_extension('B');
+abort(); // FIXME
diff --git a/riscv/insns/clmul.h b/riscv/insns/clmul.h
index e69de29..34238c9 100644
--- a/riscv/insns/clmul.h
+++ b/riscv/insns/clmul.h
@@ -0,0 +1,2 @@
+require_extension('B');
+abort(); // FIXME
diff --git a/riscv/insns/clmulh.h b/riscv/insns/clmulh.h
index e69de29..34238c9 100644
--- a/riscv/insns/clmulh.h
+++ b/riscv/insns/clmulh.h
@@ -0,0 +1,2 @@
+require_extension('B');
+abort(); // FIXME
diff --git a/riscv/insns/clmulhw.h b/riscv/insns/clmulhw.h
index e69de29..c37937f 100644
--- a/riscv/insns/clmulhw.h
+++ b/riscv/insns/clmulhw.h
@@ -0,0 +1,3 @@
+require_rv64;
+require_extension('B');
+abort(); // FIXME
diff --git a/riscv/insns/clmulhx.h b/riscv/insns/clmulhx.h
index e69de29..34238c9 100644
--- a/riscv/insns/clmulhx.h
+++ b/riscv/insns/clmulhx.h
@@ -0,0 +1,2 @@
+require_extension('B');
+abort(); // FIXME
diff --git a/riscv/insns/clmulhxw.h b/riscv/insns/clmulhxw.h
index e69de29..c37937f 100644
--- a/riscv/insns/clmulhxw.h
+++ b/riscv/insns/clmulhxw.h
@@ -0,0 +1,3 @@
+require_rv64;
+require_extension('B');
+abort(); // FIXME
diff --git a/riscv/insns/clmulw.h b/riscv/insns/clmulw.h
index e69de29..c37937f 100644
--- a/riscv/insns/clmulw.h
+++ b/riscv/insns/clmulw.h
@@ -0,0 +1,3 @@
+require_rv64;
+require_extension('B');
+abort(); // FIXME
diff --git a/riscv/insns/clz.h b/riscv/insns/clz.h
index e69de29..6821b2d 100644
--- a/riscv/insns/clz.h
+++ b/riscv/insns/clz.h
@@ -0,0 +1,5 @@
+require_extension('B');
+reg_t x = xlen;
+for (int i = 0; i < xlen; i++)
+  if (1 & (RS1 >> (xlen-i-1))) { x = i; break; }
+WRITE_RD(sext_xlen(x));
diff --git a/riscv/insns/clzw.h b/riscv/insns/clzw.h
index e69de29..6313554 100644
--- a/riscv/insns/clzw.h
+++ b/riscv/insns/clzw.h
@@ -0,0 +1,6 @@
+require_rv64;
+require_extension('B');
+reg_t x = 32;
+for (int i = 0; i < 32; i++)
+  if (1 & (RS1 >> (31-i))) { x = i; break; }
+WRITE_RD(sext32(x));
diff --git a/riscv/insns/cmix.h b/riscv/insns/cmix.h
index e69de29..727f136 100644
--- a/riscv/insns/cmix.h
+++ b/riscv/insns/cmix.h
@@ -0,0 +1,2 @@
+require_extension('B');
+WRITE_RD((RS1 & RS2) | (RS3 & ~RS2));
diff --git a/riscv/insns/cmov.h b/riscv/insns/cmov.h
index e69de29..eeae7e2 100644
--- a/riscv/insns/cmov.h
+++ b/riscv/insns/cmov.h
@@ -0,0 +1,2 @@
+require_extension('B');
+WRITE_RD(RS2 ? RS1 : RS3);
diff --git a/riscv/insns/crc32_b.h b/riscv/insns/crc32_b.h
index e69de29..8f04e56 100644
--- a/riscv/insns/crc32_b.h
+++ b/riscv/insns/crc32_b.h
@@ -0,0 +1,5 @@
+require_extension('B');
+reg_t x = RS1;
+for (int i = 0; i < 8; i++)
+  x = (x >> 1) ^ (0xEDB88320 & ~((x&1)-1));
+WRITE_RD(sext_xlen(x));
diff --git a/riscv/insns/crc32_d.h b/riscv/insns/crc32_d.h
index e69de29..e4f1583 100644
--- a/riscv/insns/crc32_d.h
+++ b/riscv/insns/crc32_d.h
@@ -0,0 +1,5 @@
+require_extension('B');
+reg_t x = RS1;
+for (int i = 0; i < 64; i++)
+  x = (x >> 1) ^ (0xEDB88320 & ~((x&1)-1));
+WRITE_RD(sext_xlen(x));
diff --git a/riscv/insns/crc32_h.h b/riscv/insns/crc32_h.h
index e69de29..aa4c0b8 100644
--- a/riscv/insns/crc32_h.h
+++ b/riscv/insns/crc32_h.h
@@ -0,0 +1,5 @@
+require_extension('B');
+reg_t x = RS1;
+for (int i = 0; i < 16; i++)
+  x = (x >> 1) ^ (0xEDB88320 & ~((x&1)-1));
+WRITE_RD(sext_xlen(x));
diff --git a/riscv/insns/crc32_w.h b/riscv/insns/crc32_w.h
index e69de29..c8874a1 100644
--- a/riscv/insns/crc32_w.h
+++ b/riscv/insns/crc32_w.h
@@ -0,0 +1,5 @@
+require_extension('B');
+reg_t x = RS1;
+for (int i = 0; i < 32; i++)
+  x = (x >> 1) ^ (0xEDB88320 & ~((x&1)-1));
+WRITE_RD(sext_xlen(x));
diff --git a/riscv/insns/crc32c_b.h b/riscv/insns/crc32c_b.h
index e69de29..89a218a 100644
--- a/riscv/insns/crc32c_b.h
+++ b/riscv/insns/crc32c_b.h
@@ -0,0 +1,5 @@
+require_extension('B');
+reg_t x = RS1;
+for (int i = 0; i < 8; i++)
+  x = (x >> 1) ^ (0x82F63B78 & ~((x&1)-1));
+WRITE_RD(sext_xlen(x));
diff --git a/riscv/insns/crc32c_d.h b/riscv/insns/crc32c_d.h
index e69de29..862407c 100644
--- a/riscv/insns/crc32c_d.h
+++ b/riscv/insns/crc32c_d.h
@@ -0,0 +1,5 @@
+require_extension('B');
+reg_t x = RS1;
+for (int i = 0; i < 64; i++)
+  x = (x >> 1) ^ (0x82F63B78 & ~((x&1)-1));
+WRITE_RD(sext_xlen(x));
diff --git a/riscv/insns/crc32c_h.h b/riscv/insns/crc32c_h.h
index e69de29..c5956b9 100644
--- a/riscv/insns/crc32c_h.h
+++ b/riscv/insns/crc32c_h.h
@@ -0,0 +1,5 @@
+require_extension('B');
+reg_t x = RS1;
+for (int i = 0; i < 16; i++)
+  x = (x >> 1) ^ (0x82F63B78 & ~((x&1)-1));
+WRITE_RD(sext_xlen(x));
diff --git a/riscv/insns/crc32c_w.h b/riscv/insns/crc32c_w.h
index e69de29..137a369 100644
--- a/riscv/insns/crc32c_w.h
+++ b/riscv/insns/crc32c_w.h
@@ -0,0 +1,5 @@
+require_extension('B');
+reg_t x = RS1;
+for (int i = 0; i < 32; i++)
+  x = (x >> 1) ^ (0x82F63B78 & ~((x&1)-1));
+WRITE_RD(sext_xlen(x));
diff --git a/riscv/insns/ctz.h b/riscv/insns/ctz.h
index e69de29..889de0f 100644
--- a/riscv/insns/ctz.h
+++ b/riscv/insns/ctz.h
@@ -0,0 +1,5 @@
+require_extension('B');
+reg_t x = xlen;
+for (int i = 0; i < xlen; i++)
+  if (1 & (RS1 >> i)) { x = i; break; }
+WRITE_RD(sext_xlen(x));
diff --git a/riscv/insns/ctzw.h b/riscv/insns/ctzw.h
index e69de29..59f58ad 100644
--- a/riscv/insns/ctzw.h
+++ b/riscv/insns/ctzw.h
@@ -0,0 +1,6 @@
+require_rv64;
+require_extension('B');
+reg_t x = 32;
+for (int i = 0; i < 32; i++)
+  if (1 & (RS1 >> i)) { x = i; break; }
+WRITE_RD(sext32(x));
diff --git a/riscv/insns/fsl.h b/riscv/insns/fsl.h
index e69de29..fdf02ad 100644
--- a/riscv/insns/fsl.h
+++ b/riscv/insns/fsl.h
@@ -0,0 +1,9 @@
+require_extension('B');
+int shamt = RS2 & (2*xlen-1);
+reg_t a = RS1, b = RS3;
+if (shamt >= xlen) {
+	a = RS3, b = RS1;
+	shamt -= xlen;
+}
+int rshamt = -shamt & (xlen-1);
+WRITE_RD(sext_xlen(shamt ? (a << shamt) | (zext_xlen(b) >> rshamt) : a));
diff --git a/riscv/insns/fslw.h b/riscv/insns/fslw.h
index e69de29..3e68130 100644
--- a/riscv/insns/fslw.h
+++ b/riscv/insns/fslw.h
@@ -0,0 +1,9 @@
+require_extension('B');
+int shamt = RS2 & 63;
+reg_t a = RS1, b = RS3;
+if (shamt >= 32) {
+	a = RS3, b = RS1;
+	shamt -= 32;
+}
+int rshamt = -shamt & 31;
+WRITE_RD(sext32(shamt ? (a << shamt) | (zext32(b) >> rshamt) : a));
diff --git a/riscv/insns/fsr.h b/riscv/insns/fsr.h
index e69de29..18a1e69 100644
--- a/riscv/insns/fsr.h
+++ b/riscv/insns/fsr.h
@@ -0,0 +1,9 @@
+require_extension('B');
+int shamt = RS2 & (2*xlen-1);
+reg_t a = RS1, b = RS3;
+if (shamt >= xlen) {
+	a = RS3, b = RS1;
+	shamt -= xlen;
+}
+int rshamt = -shamt & (xlen-1);
+WRITE_RD(sext_xlen(shamt ? (b << rshamt) | (zext_xlen(a) >> shamt) : a));
diff --git a/riscv/insns/fsri.h b/riscv/insns/fsri.h
index e69de29..2d41c82 100644
--- a/riscv/insns/fsri.h
+++ b/riscv/insns/fsri.h
@@ -0,0 +1,9 @@
+require_extension('B');
+int shamt = SHAMT & (2*xlen-1);
+reg_t a = RS1, b = RS3;
+if (shamt >= xlen) {
+	a = RS3, b = RS1;
+	shamt -= xlen;
+}
+int rshamt = -shamt & (xlen-1);
+WRITE_RD(sext_xlen(shamt ? (b << rshamt) | (zext_xlen(a) >> shamt) : a));
diff --git a/riscv/insns/fsriw.h b/riscv/insns/fsriw.h
index e69de29..7e22f0f 100644
--- a/riscv/insns/fsriw.h
+++ b/riscv/insns/fsriw.h
@@ -0,0 +1,9 @@
+require_extension('B');
+int shamt = SHAMT & 63;
+reg_t a = RS1, b = RS3;
+if (shamt >= 32) {
+	a = RS3, b = RS1;
+	shamt -= 32;
+}
+int rshamt = -shamt & 31;
+WRITE_RD(sext32(shamt ? (b << rshamt) | (zext32(a) >> shamt) : a));
diff --git a/riscv/insns/fsrw.h b/riscv/insns/fsrw.h
index e69de29..eaf408c 100644
--- a/riscv/insns/fsrw.h
+++ b/riscv/insns/fsrw.h
@@ -0,0 +1,9 @@
+require_extension('B');
+int shamt = RS2 & 63;
+reg_t a = RS1, b = RS3;
+if (shamt >= 32) {
+	a = RS3, b = RS1;
+	shamt -= 32;
+}
+int rshamt = -shamt & 31;
+WRITE_RD(sext32(shamt ? (b << rshamt) | (zext32(a) >> shamt) : a));
diff --git a/riscv/insns/grev.h b/riscv/insns/grev.h
index e69de29..b13fa5a 100644
--- a/riscv/insns/grev.h
+++ b/riscv/insns/grev.h
@@ -0,0 +1,10 @@
+require_extension('B');
+reg_t x = RS1;
+int shamt = RS2 & (xlen-1);
+if (shamt &  1) x = ((x & 0x5555555555555555LL) <<  1) | ((x & 0xAAAAAAAAAAAAAAAALL) >>  1);
+if (shamt &  2) x = ((x & 0x3333333333333333LL) <<  2) | ((x & 0xCCCCCCCCCCCCCCCCLL) >>  2);
+if (shamt &  4) x = ((x & 0x0F0F0F0F0F0F0F0FLL) <<  4) | ((x & 0xF0F0F0F0F0F0F0F0LL) >>  4);
+if (shamt &  8) x = ((x & 0x00FF00FF00FF00FFLL) <<  8) | ((x & 0xFF00FF00FF00FF00LL) >>  8);
+if (shamt & 16) x = ((x & 0x0000FFFF0000FFFFLL) << 16) | ((x & 0xFFFF0000FFFF0000LL) >> 16);
+if (shamt & 32) x = ((x & 0x00000000FFFFFFFFLL) << 32) | ((x & 0xFFFFFFFF00000000LL) >> 32);
+WRITE_RD(sext_xlen(x));
diff --git a/riscv/insns/grevi.h b/riscv/insns/grevi.h
index e69de29..68213c6 100644
--- a/riscv/insns/grevi.h
+++ b/riscv/insns/grevi.h
@@ -0,0 +1,11 @@
+require_extension('B');
+require(SHAMT < xlen);
+reg_t x = RS1;
+int shamt = SHAMT;
+if (shamt &  1) x = ((x & 0x5555555555555555LL) <<  1) | ((x & 0xAAAAAAAAAAAAAAAALL) >>  1);
+if (shamt &  2) x = ((x & 0x3333333333333333LL) <<  2) | ((x & 0xCCCCCCCCCCCCCCCCLL) >>  2);
+if (shamt &  4) x = ((x & 0x0F0F0F0F0F0F0F0FLL) <<  4) | ((x & 0xF0F0F0F0F0F0F0F0LL) >>  4);
+if (shamt &  8) x = ((x & 0x00FF00FF00FF00FFLL) <<  8) | ((x & 0xFF00FF00FF00FF00LL) >>  8);
+if (shamt & 16) x = ((x & 0x0000FFFF0000FFFFLL) << 16) | ((x & 0xFFFF0000FFFF0000LL) >> 16);
+if (shamt & 32) x = ((x & 0x00000000FFFFFFFFLL) << 32) | ((x & 0xFFFFFFFF00000000LL) >> 32);
+WRITE_RD(sext_xlen(x));
diff --git a/riscv/insns/greviw.h b/riscv/insns/greviw.h
index e69de29..500096d 100644
--- a/riscv/insns/greviw.h
+++ b/riscv/insns/greviw.h
@@ -0,0 +1,11 @@
+require_rv64;
+require_extension('B');
+require(SHAMT < 32);
+reg_t x = RS1;
+int shamt = SHAMT;
+if (shamt &  1) x = ((x & 0x5555555555555555LL) <<  1) | ((x & 0xAAAAAAAAAAAAAAAALL) >>  1);
+if (shamt &  2) x = ((x & 0x3333333333333333LL) <<  2) | ((x & 0xCCCCCCCCCCCCCCCCLL) >>  2);
+if (shamt &  4) x = ((x & 0x0F0F0F0F0F0F0F0FLL) <<  4) | ((x & 0xF0F0F0F0F0F0F0F0LL) >>  4);
+if (shamt &  8) x = ((x & 0x00FF00FF00FF00FFLL) <<  8) | ((x & 0xFF00FF00FF00FF00LL) >>  8);
+if (shamt & 16) x = ((x & 0x0000FFFF0000FFFFLL) << 16) | ((x & 0xFFFF0000FFFF0000LL) >> 16);
+WRITE_RD(sext32(x));
diff --git a/riscv/insns/grevw.h b/riscv/insns/grevw.h
index e69de29..274dd6f 100644
--- a/riscv/insns/grevw.h
+++ b/riscv/insns/grevw.h
@@ -0,0 +1,10 @@
+require_rv64;
+require_extension('B');
+reg_t x = RS1;
+int shamt = RS2 & 31;
+if (shamt &  1) x = ((x & 0x5555555555555555LL) <<  1) | ((x & 0xAAAAAAAAAAAAAAAALL) >>  1);
+if (shamt &  2) x = ((x & 0x3333333333333333LL) <<  2) | ((x & 0xCCCCCCCCCCCCCCCCLL) >>  2);
+if (shamt &  4) x = ((x & 0x0F0F0F0F0F0F0F0FLL) <<  4) | ((x & 0xF0F0F0F0F0F0F0F0LL) >>  4);
+if (shamt &  8) x = ((x & 0x00FF00FF00FF00FFLL) <<  8) | ((x & 0xFF00FF00FF00FF00LL) >>  8);
+if (shamt & 16) x = ((x & 0x0000FFFF0000FFFFLL) << 16) | ((x & 0xFFFF0000FFFF0000LL) >> 16);
+WRITE_RD(sext32(x));
diff --git a/riscv/insns/max.h b/riscv/insns/max.h
index e69de29..f57e722 100644
--- a/riscv/insns/max.h
+++ b/riscv/insns/max.h
@@ -0,0 +1,2 @@
+require_extension('B');
+WRITE_RD(sext_xlen(sreg_t(RS1) > sreg_t(RS2) ? RS1 : RS2));
diff --git a/riscv/insns/maxu.h b/riscv/insns/maxu.h
index e69de29..e1ecdf4 100644
--- a/riscv/insns/maxu.h
+++ b/riscv/insns/maxu.h
@@ -0,0 +1,2 @@
+require_extension('B');
+WRITE_RD(sext_xlen(RS1 > RS2 ? RS1 : RS2));
diff --git a/riscv/insns/min.h b/riscv/insns/min.h
index e69de29..1b2fadb 100644
--- a/riscv/insns/min.h
+++ b/riscv/insns/min.h
@@ -0,0 +1,2 @@
+require_extension('B');
+WRITE_RD(sext_xlen(sreg_t(RS1) < sreg_t(RS2) ? RS1 : RS2));
diff --git a/riscv/insns/minu.h b/riscv/insns/minu.h
index e69de29..fdf315e 100644
--- a/riscv/insns/minu.h
+++ b/riscv/insns/minu.h
@@ -0,0 +1,2 @@
+require_extension('B');
+WRITE_RD(sext_xlen(RS1 < RS2 ? RS1 : RS2));
diff --git a/riscv/insns/orn.h b/riscv/insns/orn.h
index e69de29..670926f 100644
--- a/riscv/insns/orn.h
+++ b/riscv/insns/orn.h
@@ -0,0 +1,2 @@
+require_extension('B');
+WRITE_RD(RS1 | ~RS2);
diff --git a/riscv/insns/pack.h b/riscv/insns/pack.h
index e69de29..34238c9 100644
--- a/riscv/insns/pack.h
+++ b/riscv/insns/pack.h
@@ -0,0 +1,2 @@
+require_extension('B');
+abort(); // FIXME
diff --git a/riscv/insns/packw.h b/riscv/insns/packw.h
index e69de29..c37937f 100644
--- a/riscv/insns/packw.h
+++ b/riscv/insns/packw.h
@@ -0,0 +1,3 @@
+require_rv64;
+require_extension('B');
+abort(); // FIXME
diff --git a/riscv/insns/pcnt.h b/riscv/insns/pcnt.h
index e69de29..773e2e1 100644
--- a/riscv/insns/pcnt.h
+++ b/riscv/insns/pcnt.h
@@ -0,0 +1,5 @@
+require_extension('B');
+reg_t x = 0;
+for (int i = 0; i < xlen; i++)
+  if (1 & (RS1 >> i)) x++;
+WRITE_RD(sext_xlen(x));
diff --git a/riscv/insns/pcntw.h b/riscv/insns/pcntw.h
index e69de29..13e9ba0 100644
--- a/riscv/insns/pcntw.h
+++ b/riscv/insns/pcntw.h
@@ -0,0 +1,6 @@
+require_rv64;
+require_extension('B');
+reg_t x = 0;
+for (int i = 0; i < 32; i++)
+  if (1 & (RS1 >> i)) x++;
+WRITE_RD(sext32(x));
diff --git a/riscv/insns/rol.h b/riscv/insns/rol.h
index e69de29..2b15c93 100644
--- a/riscv/insns/rol.h
+++ b/riscv/insns/rol.h
@@ -0,0 +1,4 @@
+require_extension('B');
+int shamt = RS2 & (xlen-1);
+int rshamt = -shamt & (xlen-1);
+WRITE_RD(sext_xlen((RS1 << shamt) | (zext_xlen(RS1) >> rshamt)));
diff --git a/riscv/insns/rolw.h b/riscv/insns/rolw.h
index e69de29..6d66a50 100644
--- a/riscv/insns/rolw.h
+++ b/riscv/insns/rolw.h
@@ -0,0 +1,5 @@
+require_rv64;
+require_extension('B');
+int shamt = RS2 & 31;
+int rshamt = -shamt & 31;
+WRITE_RD(sext32((RS1 << shamt) | (zext32(RS1) >> rshamt)));
diff --git a/riscv/insns/ror.h b/riscv/insns/ror.h
index e69de29..8788a12 100644
--- a/riscv/insns/ror.h
+++ b/riscv/insns/ror.h
@@ -0,0 +1,4 @@
+require_extension('B');
+int shamt = RS2 & (xlen-1);
+int rshamt = -shamt & (xlen-1);
+WRITE_RD(sext_xlen((RS1 << rshamt) | (zext_xlen(RS1) >> shamt)));
diff --git a/riscv/insns/rori.h b/riscv/insns/rori.h
index e69de29..72f1529 100644
--- a/riscv/insns/rori.h
+++ b/riscv/insns/rori.h
@@ -0,0 +1,5 @@
+require_extension('B');
+require(SHAMT < xlen);
+int shamt = SHAMT & (xlen-1);
+int rshamt = -shamt & (xlen-1);
+WRITE_RD(sext_xlen((RS1 << rshamt) | (zext_xlen(RS1) >> shamt)));
diff --git a/riscv/insns/roriw.h b/riscv/insns/roriw.h
index e69de29..d0b8d67 100644
--- a/riscv/insns/roriw.h
+++ b/riscv/insns/roriw.h
@@ -0,0 +1,5 @@
+require_extension('B');
+require(SHAMT < 32);
+int shamt = SHAMT & 31;
+int rshamt = -shamt & 31;
+WRITE_RD(sext32((RS1 << rshamt) | (zext32(RS1) >> shamt)));
diff --git a/riscv/insns/rorw.h b/riscv/insns/rorw.h
index e69de29..b42ab73 100644
--- a/riscv/insns/rorw.h
+++ b/riscv/insns/rorw.h
@@ -0,0 +1,5 @@
+require_rv64;
+require_extension('B');
+int shamt = RS2 & 31;
+int rshamt = -shamt & 31;
+WRITE_RD(sext32((RS1 << rshamt) | (zext32(RS1) >> shamt)));
diff --git a/riscv/insns/sbclr.h b/riscv/insns/sbclr.h
index e69de29..f0b0e0a 100644
--- a/riscv/insns/sbclr.h
+++ b/riscv/insns/sbclr.h
@@ -0,0 +1,3 @@
+require_extension('B');
+int shamt = RS2 & (xlen-1);
+WRITE_RD(sext_xlen(RS1 & ~(1LL << shamt)));
diff --git a/riscv/insns/sbclri.h b/riscv/insns/sbclri.h
index e69de29..546dcaa 100644
--- a/riscv/insns/sbclri.h
+++ b/riscv/insns/sbclri.h
@@ -0,0 +1,3 @@
+require_extension('B');
+int shamt = SHAMT & (xlen-1);
+WRITE_RD(sext_xlen(RS1 & ~(1LL << shamt)));
diff --git a/riscv/insns/sbclriw.h b/riscv/insns/sbclriw.h
index e69de29..3a26fe0 100644
--- a/riscv/insns/sbclriw.h
+++ b/riscv/insns/sbclriw.h
@@ -0,0 +1,3 @@
+require_extension('B');
+int shamt = SHAMT & 31;
+WRITE_RD(sext32(RS1 & ~(1LL << shamt)));
diff --git a/riscv/insns/sbclrw.h b/riscv/insns/sbclrw.h
index e69de29..e089298 100644
--- a/riscv/insns/sbclrw.h
+++ b/riscv/insns/sbclrw.h
@@ -0,0 +1,3 @@
+require_extension('B');
+int shamt = RS2 & 31;
+WRITE_RD(sext32(RS1 & ~(1LL << shamt)));
diff --git a/riscv/insns/sbext.h b/riscv/insns/sbext.h
index e69de29..7149a2a 100644
--- a/riscv/insns/sbext.h
+++ b/riscv/insns/sbext.h
@@ -0,0 +1,3 @@
+require_extension('B');
+int shamt = RS2 & (xlen-1);
+WRITE_RD(sext_xlen(1 & (RS1 >> shamt)));
diff --git a/riscv/insns/sbexti.h b/riscv/insns/sbexti.h
index e69de29..c930cfb 100644
--- a/riscv/insns/sbexti.h
+++ b/riscv/insns/sbexti.h
@@ -0,0 +1,3 @@
+require_extension('B');
+int shamt = SHAMT & (xlen-1);
+WRITE_RD(sext_xlen(1 & (RS1 >> shamt)));
diff --git a/riscv/insns/sbextw.h b/riscv/insns/sbextw.h
index e69de29..1041453 100644
--- a/riscv/insns/sbextw.h
+++ b/riscv/insns/sbextw.h
@@ -0,0 +1,3 @@
+require_extension('B');
+int shamt = RS2 & 31;
+WRITE_RD(sext32(1 & (RS1 >> shamt)));
diff --git a/riscv/insns/sbinv.h b/riscv/insns/sbinv.h
index e69de29..5892252 100644
--- a/riscv/insns/sbinv.h
+++ b/riscv/insns/sbinv.h
@@ -0,0 +1,3 @@
+require_extension('B');
+int shamt = RS2 & (xlen-1);
+WRITE_RD(sext_xlen(RS1 ^ (1LL << shamt)));
diff --git a/riscv/insns/sbinvi.h b/riscv/insns/sbinvi.h
index e69de29..f67143c 100644
--- a/riscv/insns/sbinvi.h
+++ b/riscv/insns/sbinvi.h
@@ -0,0 +1,3 @@
+require_extension('B');
+int shamt = SHAMT & (xlen-1);
+WRITE_RD(sext_xlen(RS1 ^ (1LL << shamt)));
diff --git a/riscv/insns/sbinviw.h b/riscv/insns/sbinviw.h
index e69de29..80fef91 100644
--- a/riscv/insns/sbinviw.h
+++ b/riscv/insns/sbinviw.h
@@ -0,0 +1,3 @@
+require_extension('B');
+int shamt = SHAMT & 31;
+WRITE_RD(sext32(RS1 ^ (1LL << shamt)));
diff --git a/riscv/insns/sbinvw.h b/riscv/insns/sbinvw.h
index e69de29..1b9ccfd 100644
--- a/riscv/insns/sbinvw.h
+++ b/riscv/insns/sbinvw.h
@@ -0,0 +1,3 @@
+require_extension('B');
+int shamt = RS2 & 31;
+WRITE_RD(sext32(RS1 ^ (1LL << shamt)));
diff --git a/riscv/insns/sbset.h b/riscv/insns/sbset.h
index e69de29..0e3f0fc 100644
--- a/riscv/insns/sbset.h
+++ b/riscv/insns/sbset.h
@@ -0,0 +1,3 @@
+require_extension('B');
+int shamt = RS2 & (xlen-1);
+WRITE_RD(sext_xlen(RS1 | (1LL << shamt)));
diff --git a/riscv/insns/sbseti.h b/riscv/insns/sbseti.h
index e69de29..44aa8bb 100644
--- a/riscv/insns/sbseti.h
+++ b/riscv/insns/sbseti.h
@@ -0,0 +1,3 @@
+require_extension('B');
+int shamt = SHAMT & (xlen-1);
+WRITE_RD(sext_xlen(RS1 | (1LL << shamt)));
diff --git a/riscv/insns/sbsetiw.h b/riscv/insns/sbsetiw.h
index e69de29..dcfc6b1 100644
--- a/riscv/insns/sbsetiw.h
+++ b/riscv/insns/sbsetiw.h
@@ -0,0 +1,3 @@
+require_extension('B');
+int shamt = SHAMT & 31;
+WRITE_RD(sext32(RS1 | (1LL << shamt)));
diff --git a/riscv/insns/sbsetw.h b/riscv/insns/sbsetw.h
index e69de29..c65199a 100644
--- a/riscv/insns/sbsetw.h
+++ b/riscv/insns/sbsetw.h
@@ -0,0 +1,3 @@
+require_extension('B');
+int shamt = RS2 & 31;
+WRITE_RD(sext32(RS1 | (1LL << shamt)));
diff --git a/riscv/insns/shfl.h b/riscv/insns/shfl.h
index e69de29..5d41336 100644
--- a/riscv/insns/shfl.h
+++ b/riscv/insns/shfl.h
@@ -0,0 +1,9 @@
+require_extension('B');
+reg_t x = RS1;
+int shamt = RS2 & (xlen-1);
+if (shamt & 16) x = (x & 0xFFFF00000000FFFFLL) | ((x & 0x0000FFFF00000000LL) >> 16) | ((x & 0x00000000FFFF0000LL) << 16);
+if (shamt &  8) x = (x & 0xFF0000FFFF0000FFLL) | ((x & 0x00FF000000FF0000LL) >>  8) | ((x & 0x0000FF000000FF00LL) <<  8);
+if (shamt &  4) x = (x & 0xF00FF00FF00FF00FLL) | ((x & 0x0F000F000F000F00LL) >>  4) | ((x & 0x00F000F000F000F0LL) <<  4);
+if (shamt &  2) x = (x & 0xC3C3C3C3C3C3C3C3LL) | ((x & 0x3030303030303030LL) >>  2) | ((x & 0x0C0C0C0C0C0C0C0CLL) <<  2);
+if (shamt &  1) x = (x & 0x9999999999999999LL) | ((x & 0x4444444444444444LL) >>  1) | ((x & 0x2222222222222222LL) <<  1);
+WRITE_RD(sext_xlen(x));
diff --git a/riscv/insns/shfli.h b/riscv/insns/shfli.h
index e69de29..964638e 100644
--- a/riscv/insns/shfli.h
+++ b/riscv/insns/shfli.h
@@ -0,0 +1,10 @@
+require_extension('B');
+require(SHAMT < (xlen/2));
+reg_t x = RS1;
+int shamt = SHAMT & (xlen-1);
+if (shamt & 16) x = (x & 0xFFFF00000000FFFFLL) | ((x & 0x0000FFFF00000000LL) >> 16) | ((x & 0x00000000FFFF0000LL) << 16);
+if (shamt &  8) x = (x & 0xFF0000FFFF0000FFLL) | ((x & 0x00FF000000FF0000LL) >>  8) | ((x & 0x0000FF000000FF00LL) <<  8);
+if (shamt &  4) x = (x & 0xF00FF00FF00FF00FLL) | ((x & 0x0F000F000F000F00LL) >>  4) | ((x & 0x00F000F000F000F0LL) <<  4);
+if (shamt &  2) x = (x & 0xC3C3C3C3C3C3C3C3LL) | ((x & 0x3030303030303030LL) >>  2) | ((x & 0x0C0C0C0C0C0C0C0CLL) <<  2);
+if (shamt &  1) x = (x & 0x9999999999999999LL) | ((x & 0x4444444444444444LL) >>  1) | ((x & 0x2222222222222222LL) <<  1);
+WRITE_RD(sext_xlen(x));
diff --git a/riscv/insns/shflw.h b/riscv/insns/shflw.h
index e69de29..361ee36 100644
--- a/riscv/insns/shflw.h
+++ b/riscv/insns/shflw.h
@@ -0,0 +1,8 @@
+require_extension('B');
+reg_t x = RS1;
+int shamt = RS2 & 15;
+if (shamt &  8) x = (x & 0xFF0000FFFF0000FFLL) | ((x & 0x00FF000000FF0000LL) >>  8) | ((x & 0x0000FF000000FF00LL) <<  8);
+if (shamt &  4) x = (x & 0xF00FF00FF00FF00FLL) | ((x & 0x0F000F000F000F00LL) >>  4) | ((x & 0x00F000F000F000F0LL) <<  4);
+if (shamt &  2) x = (x & 0xC3C3C3C3C3C3C3C3LL) | ((x & 0x3030303030303030LL) >>  2) | ((x & 0x0C0C0C0C0C0C0C0CLL) <<  2);
+if (shamt &  1) x = (x & 0x9999999999999999LL) | ((x & 0x4444444444444444LL) >>  1) | ((x & 0x2222222222222222LL) <<  1);
+WRITE_RD(sext32(x));
diff --git a/riscv/insns/slliu_w.h b/riscv/insns/slliu_w.h
index e69de29..99ac5f8 100644
--- a/riscv/insns/slliu_w.h
+++ b/riscv/insns/slliu_w.h
@@ -0,0 +1,3 @@
+require_rv64;
+require_extension('B');
+WRITE_RD(sext_xlen(zext32(RS1) << SHAMT));
diff --git a/riscv/insns/slo.h b/riscv/insns/slo.h
index e69de29..0836cf8 100644
--- a/riscv/insns/slo.h
+++ b/riscv/insns/slo.h
@@ -0,0 +1,2 @@
+require_extension('B');
+WRITE_RD(sext_xlen(~((~RS1) << (RS2 & (xlen-1)))));
diff --git a/riscv/insns/sloi.h b/riscv/insns/sloi.h
index e69de29..216cf9c 100644
--- a/riscv/insns/sloi.h
+++ b/riscv/insns/sloi.h
@@ -0,0 +1,3 @@
+require(SHAMT < xlen);
+require_extension('B');
+WRITE_RD(sext_xlen(~((~RS1) << SHAMT)));
diff --git a/riscv/insns/sloiw.h b/riscv/insns/sloiw.h
index e69de29..5ec7576 100644
--- a/riscv/insns/sloiw.h
+++ b/riscv/insns/sloiw.h
@@ -0,0 +1,3 @@
+require_rv64;
+require_extension('B');
+WRITE_RD(sext32(~((~RS1) << SHAMT)));
diff --git a/riscv/insns/slow.h b/riscv/insns/slow.h
index e69de29..2f958c6 100644
--- a/riscv/insns/slow.h
+++ b/riscv/insns/slow.h
@@ -0,0 +1,3 @@
+require_rv64;
+require_extension('B');
+WRITE_RD(sext32(~((~RS1) << (RS2 & 0x1F))));
diff --git a/riscv/insns/sro.h b/riscv/insns/sro.h
index e69de29..632e8dd 100644
--- a/riscv/insns/sro.h
+++ b/riscv/insns/sro.h
@@ -0,0 +1,2 @@
+require_extension('B');
+WRITE_RD(sext_xlen(~((~zext_xlen(RS1)) >> (RS2 & (xlen-1)))));
diff --git a/riscv/insns/sroi.h b/riscv/insns/sroi.h
index e69de29..b9b73bf 100644
--- a/riscv/insns/sroi.h
+++ b/riscv/insns/sroi.h
@@ -0,0 +1,3 @@
+require(SHAMT < xlen);
+require_extension('B');
+WRITE_RD(sext_xlen(~((~zext_xlen(RS1)) >> SHAMT)));
diff --git a/riscv/insns/sroiw.h b/riscv/insns/sroiw.h
index e69de29..671af39 100644
--- a/riscv/insns/sroiw.h
+++ b/riscv/insns/sroiw.h
@@ -0,0 +1,3 @@
+require_rv64;
+require_extension('B');
+WRITE_RD(sext32(~((~(uint32_t)RS1) >> SHAMT)));
diff --git a/riscv/insns/srow.h b/riscv/insns/srow.h
index e69de29..74ba73e 100644
--- a/riscv/insns/srow.h
+++ b/riscv/insns/srow.h
@@ -0,0 +1,3 @@
+require_rv64;
+require_extension('B');
+WRITE_RD(sext32(~((~(uint32_t)RS1) >> (RS2 & 0x1F))));
diff --git a/riscv/insns/subu_w.h b/riscv/insns/subu_w.h
index e69de29..0afeb14 100644
--- a/riscv/insns/subu_w.h
+++ b/riscv/insns/subu_w.h
@@ -0,0 +1,3 @@
+require_rv64;
+require_extension('B');
+WRITE_RD(sext_xlen(RS1 - zext32(RS2)));
diff --git a/riscv/insns/subwu.h b/riscv/insns/subwu.h
index e69de29..a97f6d7 100644
--- a/riscv/insns/subwu.h
+++ b/riscv/insns/subwu.h
@@ -0,0 +1,3 @@
+require_rv64;
+require_extension('B');
+WRITE_RD(zext32(RS1 - RS2));
diff --git a/riscv/insns/unshfl.h b/riscv/insns/unshfl.h
index e69de29..bc50f70 100644
--- a/riscv/insns/unshfl.h
+++ b/riscv/insns/unshfl.h
@@ -0,0 +1,9 @@
+require_extension('B');
+reg_t x = RS1;
+int shamt = RS2 & (xlen-1);
+if (shamt &  1) x = (x & 0x9999999999999999LL) | ((x & 0x4444444444444444LL) >>  1) | ((x & 0x2222222222222222LL) <<  1);
+if (shamt &  2) x = (x & 0xC3C3C3C3C3C3C3C3LL) | ((x & 0x3030303030303030LL) >>  2) | ((x & 0x0C0C0C0C0C0C0C0CLL) <<  2);
+if (shamt &  4) x = (x & 0xF00FF00FF00FF00FLL) | ((x & 0x0F000F000F000F00LL) >>  4) | ((x & 0x00F000F000F000F0LL) <<  4);
+if (shamt &  8) x = (x & 0xFF0000FFFF0000FFLL) | ((x & 0x00FF000000FF0000LL) >>  8) | ((x & 0x0000FF000000FF00LL) <<  8);
+if (shamt & 16) x = (x & 0xFFFF00000000FFFFLL) | ((x & 0x0000FFFF00000000LL) >> 16) | ((x & 0x00000000FFFF0000LL) << 16);
+WRITE_RD(sext_xlen(x));
diff --git a/riscv/insns/unshfli.h b/riscv/insns/unshfli.h
index e69de29..af25d7d 100644
--- a/riscv/insns/unshfli.h
+++ b/riscv/insns/unshfli.h
@@ -0,0 +1,10 @@
+require_extension('B');
+require(SHAMT < (xlen/2));
+reg_t x = RS1;
+int shamt = SHAMT & (xlen-1);
+if (shamt &  1) x = (x & 0x9999999999999999LL) | ((x & 0x4444444444444444LL) >>  1) | ((x & 0x2222222222222222LL) <<  1);
+if (shamt &  2) x = (x & 0xC3C3C3C3C3C3C3C3LL) | ((x & 0x3030303030303030LL) >>  2) | ((x & 0x0C0C0C0C0C0C0C0CLL) <<  2);
+if (shamt &  4) x = (x & 0xF00FF00FF00FF00FLL) | ((x & 0x0F000F000F000F00LL) >>  4) | ((x & 0x00F000F000F000F0LL) <<  4);
+if (shamt &  8) x = (x & 0xFF0000FFFF0000FFLL) | ((x & 0x00FF000000FF0000LL) >>  8) | ((x & 0x0000FF000000FF00LL) <<  8);
+if (shamt & 16) x = (x & 0xFFFF00000000FFFFLL) | ((x & 0x0000FFFF00000000LL) >> 16) | ((x & 0x00000000FFFF0000LL) << 16);
+WRITE_RD(sext_xlen(x));
diff --git a/riscv/insns/unshflw.h b/riscv/insns/unshflw.h
index e69de29..5210bde 100644
--- a/riscv/insns/unshflw.h
+++ b/riscv/insns/unshflw.h
@@ -0,0 +1,8 @@
+require_extension('B');
+reg_t x = RS1;
+int shamt = RS2 & 15;
+if (shamt &  1) x = (x & 0x9999999999999999LL) | ((x & 0x4444444444444444LL) >>  1) | ((x & 0x2222222222222222LL) <<  1);
+if (shamt &  2) x = (x & 0xC3C3C3C3C3C3C3C3LL) | ((x & 0x3030303030303030LL) >>  2) | ((x & 0x0C0C0C0C0C0C0C0CLL) <<  2);
+if (shamt &  4) x = (x & 0xF00FF00FF00FF00FLL) | ((x & 0x0F000F000F000F00LL) >>  4) | ((x & 0x00F000F000F000F0LL) <<  4);
+if (shamt &  8) x = (x & 0xFF0000FFFF0000FFLL) | ((x & 0x00FF000000FF0000LL) >>  8) | ((x & 0x0000FF000000FF00LL) <<  8);
+WRITE_RD(sext32(x));
diff --git a/riscv/insns/xnor.h b/riscv/insns/xnor.h
index e69de29..b2fe95b 100644
--- a/riscv/insns/xnor.h
+++ b/riscv/insns/xnor.h
@@ -0,0 +1,2 @@
+require_extension('B');
+WRITE_RD(RS1 ^ ~RS2);
diff --git a/riscv/processor.cc b/riscv/processor.cc
index 189b7db..b3f4f85 100644
--- a/riscv/processor.cc
+++ b/riscv/processor.cc
@@ -65,7 +65,7 @@ void processor_t::parse_isa_string(const char* str)
     lowercase += std::tolower(*r);
 
   const char* p = lowercase.c_str();
-  const char* all_subsets = "imafdqc";
+  const char* all_subsets = "imafdqcb";
 
   max_xlen = 64;
   state.misa = reg_t(2) << 62;
@@ -492,13 +492,14 @@ void processor_t::set_csr(int which, reg_t val)
       if (!(val & (1L << ('F' - 'A'))))
         val &= ~(1L << ('D' - 'A'));
 
-      // allow MAFDC bits in MISA to be modified
+      // allow MAFDCB bits in MISA to be modified
       reg_t mask = 0;
       mask |= 1L << ('M' - 'A');
       mask |= 1L << ('A' - 'A');
       mask |= 1L << ('F' - 'A');
       mask |= 1L << ('D' - 'A');
       mask |= 1L << ('C' - 'A');
+      mask |= 1L << ('B' - 'A');
       mask &= max_isa;
 
       state.misa = (val & mask) | (state.misa & ~mask);
diff --git a/riscv/riscv.mk.in b/riscv/riscv.mk.in
index 80755e7..f561fb6 100644
--- a/riscv/riscv.mk.in
+++ b/riscv/riscv.mk.in
@@ -65,7 +65,10 @@ riscv_insn_list = \
 	add \
 	addi \
 	addiw \
+	addiwu \
+	addu_w \
 	addw \
+	addwu \
 	amoadd_d \
 	amoadd_w \
 	amoand_d \
@@ -85,13 +88,21 @@ riscv_insn_list = \
 	amoxor_d \
 	amoxor_w \
 	and \
+	andn \
 	andi \
 	auipc \
+	bdep \
+	bdepw \
 	beq \
+	bext \
+	bextw \
 	bge \
 	bgeu \
 	blt \
 	bltu \
+	bmatflip \
+	bmator \
+	bmatxor \
 	bne \
 	c_add \
 	c_addi4spn \
@@ -126,12 +137,32 @@ riscv_insn_list = \
 	c_sub \
 	c_subw \
 	c_xor \
+	clmul \
+	clmulh \
+	clmulhw \
+	clmulhx \
+	clmulhxw \
+	clmulw \
+	clz \
+	clzw \
+	cmix \
+	cmov \
+	crc32_b \
+	crc32_d \
+	crc32_h \
+	crc32_w \
+	crc32c_b \
+	crc32c_d \
+	crc32c_h \
+	crc32c_w \
 	csrrc \
 	csrrci \
 	csrrs \
 	csrrsi \
 	csrrw \
 	csrrwi \
+	ctz \
+	ctzw \
 	c_sw \
 	c_swsp \
 	div \
@@ -229,14 +260,24 @@ riscv_insn_list = \
 	fsgnjx_d \
 	fsgnjx_q \
 	fsgnjx_s \
+	fsl \
+	fslw \
 	fsq \
 	fsqrt_d \
 	fsqrt_q \
 	fsqrt_s \
+	fsr \
+	fsri \
+	fsriw \
+	fsrw \
 	fsub_d \
 	fsub_q \
 	fsub_s \
 	fsw \
+	grev \
+	grevi \
+	grevw \
+	greviw \
 	jal \
 	jalr \
 	lb \
@@ -249,6 +290,10 @@ riscv_insn_list = \
 	lui \
 	lw \
 	lwu \
+	max \
+	maxu \
+	min \
+	minu \
 	mret \
 	mul \
 	mulh \
@@ -257,20 +302,54 @@ riscv_insn_list = \
 	mulw \
 	or \
 	ori \
+	orn \
+	pack \
+	packw \
+	pcnt \
+	pcntw \
 	rem \
 	remu \
 	remuw \
 	remw \
+	rol \
+	rolw \
+	ror \
+	rori \
+	roriw \
+	rorw \
 	sb \
+	sbclr \
+	sbclri \
+	sbclriw \
+	sbclrw \
+	sbext \
+	sbexti \
+	sbextw \
+	sbinv \
+	sbinvi \
+	sbinviw \
+	sbinvw \
+	sbset \
+	sbseti \
+	sbsetiw \
+	sbsetw \
 	sc_d \
 	sc_w \
 	sd \
 	sfence_vma \
 	sh \
+	shfl \
+	shfli \
+	shflw \
 	sll \
 	slli \
+	slliu_w \
 	slliw \
 	sllw \
+	slo \
+	sloi \
+	sloiw \
+	slow \
 	slt \
 	slti \
 	sltiu \
@@ -284,10 +363,20 @@ riscv_insn_list = \
 	srli \
 	srliw \
 	srlw \
+	sro \
+	sroi \
+	sroiw \
+	srow \
 	sub \
+	subu_w \
 	subw \
+	subwu \
 	sw \
+	unshfl \
+	unshfli \
+	unshflw \
 	wfi \
+	xnor \
 	xor \
 	xori \
 
