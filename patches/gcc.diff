diff --git a/gcc/common/config/riscv/riscv-common.c b/gcc/common/config/riscv/riscv-common.c
index eeb75717d..2555589b0 100644
--- a/gcc/common/config/riscv/riscv-common.c
+++ b/gcc/common/config/riscv/riscv-common.c
@@ -568,6 +568,10 @@ riscv_parse_arch_string (const char *isa, int *flags, location_t loc)
   if (subset_list->lookup ("c"))
     *flags |= MASK_RVC;
 
+  *flags &= ~MASK_BITMANIP;
+  if (subset_list->lookup ("b"))
+    *flags |= MASK_BITMANIP;
+
   if (current_subset_list)
     delete current_subset_list;
 
diff --git a/gcc/config/riscv/bitmanip.md b/gcc/config/riscv/bitmanip.md
index e69de29bb..090307012 100644
--- a/gcc/config/riscv/bitmanip.md
+++ b/gcc/config/riscv/bitmanip.md
@@ -0,0 +1,252 @@
+;; Machine description for RISC-V Bit Manipulation operations.
+;; Copyright (C) 2019 Free Software Foundation, Inc.
+
+;; This file is part of GCC.
+
+;; GCC is free software; you can redistribute it and/or modify
+;; it under the terms of the GNU General Public License as published by
+;; the Free Software Foundation; either version 3, or (at your option)
+;; any later version.
+
+;; GCC is distributed in the hope that it will be useful,
+;; but WITHOUT ANY WARRANTY; without even the implied warranty of
+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+;; GNU General Public License for more details.
+
+;; You should have received a copy of the GNU General Public License
+;; along with GCC; see the file COPYING3.  If not see
+;; <http://www.gnu.org/licenses/>.
+
+(define_code_iterator bitmanip_bitwise [and ior])
+
+(define_code_iterator any_minmax [smin smax umin umax])
+
+(define_code_attr bitmanip_optab [(smin "smin")
+				  (smax "smax")
+				  (umin "umin")
+				  (umax "umax")])
+
+(define_code_attr bitmanip_insn [(smin "min")
+				 (smax "max")
+				 (umin "minu")
+				 (umax "maxu")])
+
+(define_insn "clzsi2"
+  [(set (match_operand:SI 0 "register_operand" "=r")
+	(clz:SI (match_operand:SI 1 "register_operand" "r")))]
+  "TARGET_BITMANIP"
+  { return TARGET_64BIT ? "clzw\t%0,%1" : "clz\t%0,%1"; }
+  [(set_attr "type" "bitmanip")])
+
+(define_insn "clzdi2"
+  [(set (match_operand:DI 0 "register_operand" "=r")
+	(clz:DI (match_operand:DI 1 "register_operand" "r")))]
+  "TARGET_64BIT && TARGET_BITMANIP"
+  "clz\t%0,%1"
+  [(set_attr "type" "bitmanip")])
+
+(define_insn "ctzsi2"
+  [(set (match_operand:SI 0 "register_operand" "=r")
+	(ctz:SI (match_operand:SI 1 "register_operand" "r")))]
+  "TARGET_BITMANIP"
+  { return TARGET_64BIT ? "ctzw\t%0,%1" : "ctz\t%0,%1"; }
+  [(set_attr "type" "bitmanip")])
+
+(define_insn "ctzdi2"
+  [(set (match_operand:DI 0 "register_operand" "=r")
+	(ctz:DI (match_operand:DI 1 "register_operand" "r")))]
+  "TARGET_64BIT && TARGET_BITMANIP"
+  "ctz\t%0,%1"
+  [(set_attr "type" "bitmanip")])
+
+(define_insn "popcountsi2"
+  [(set (match_operand:SI 0 "register_operand" "=r")
+	(popcount:SI (match_operand:SI 1 "register_operand" "r")))]
+  "TARGET_BITMANIP"
+  { return TARGET_64BIT ? "pcntw\t%0,%1" : "pcnt\t%0,%1"; }
+  [(set_attr "type" "bitmanip")])
+
+(define_insn "popcountdi2"
+  [(set (match_operand:DI 0 "register_operand" "=r")
+	(popcount:DI (match_operand:DI 1 "register_operand" "r")))]
+  "TARGET_64BIT && TARGET_BITMANIP"
+  "pcnt\t%0,%1"
+  [(set_attr "type" "bitmanip")])
+
+(define_insn "*<optab>_not<mode>"
+  [(set (match_operand:X 0 "register_operand" "=r")
+	(bitmanip_bitwise:X (not:X (match_operand:X 1 "register_operand" "r"))
+			    (match_operand:X 2 "register_operand" "r")))]
+  "TARGET_BITMANIP"
+  "<insn>n\t%0,%2,%1"
+  [(set_attr "type" "bitmanip")])
+
+(define_insn "*xor_not<mode>"
+  [(set (match_operand:X 0 "register_operand" "=r")
+	(not:X (xor:X (match_operand:X 1 "register_operand" "r")
+		      (match_operand:X 2 "register_operand" "r"))))]
+  "TARGET_BITMANIP"
+  "xnor\t%0,%1,%2"
+  [(set_attr "type" "bitmanip")])
+ 
+;;; ??? pack
+
+;; ??? assembler doesn't support zext.h
+(define_insn "*zero_extendhi<GPR:mode>2_bitmanip"
+  [(set (match_operand:GPR 0 "register_operand" "=r,r")
+	(zero_extend:GPR (match_operand:HI 1 "nonimmediate_operand" "r,m")))]
+  "TARGET_BITMANIP"
+{
+  if (which_alternative == 0)
+   return TARGET_64BIT ? "packw\t%0,%1,x0" : "pack\t%0,%1,x0";
+  else
+   return "lhu\t%0,%1";
+}
+  [(set_attr "type" "bitmanip,load")])
+
+;; ??? assembler doesn't support zext.w
+(define_insn "*zero_extendsidi2_bitmanip"
+  [(set (match_operand:DI 0 "register_operand" "=r,r")
+	(zero_extend:DI (match_operand:SI 1 "nonimmediate_operand" "r,m")))]
+  "TARGET_64BIT && TARGET_BITMANIP"
+  "@
+   pack\t%0,%1,x0
+   lwu\t%0,%1"
+  [(set_attr "type" "bitmanip,load")])
+
+(define_insn "<bitmanip_optab><mode>3"
+  [(set (match_operand:X 0 "register_operand" "=r")
+	(any_minmax:X (match_operand:X 1 "register_operand" "r")
+		      (match_operand:X 2 "register_operand" "r")))]
+  "TARGET_BITMANIP"
+  "<bitmanip_insn>\t%0,%1,%2"
+  [(set_attr "type" "bitmanip")])
+
+;;; ??? sb*
+
+;;; ??? s[lr]o*
+
+(define_insn "rotrsi3"
+  [(set (match_operand:SI 0 "register_operand" "=r")
+	(rotatert:SI (match_operand:SI 1 "register_operand" "r")
+		     (match_operand:SI 2 "arith_operand" "rI")))]
+  "TARGET_BITMANIP"
+  { return TARGET_64BIT ? "ror%i2w\t%0,%1,%2" : "ror%i2\t%0,%1,%2"; }
+  [(set_attr "type" "bitmanip")])
+
+(define_insn "rotrdi3"
+  [(set (match_operand:DI 0 "register_operand" "=r")
+	(rotatert:DI (match_operand:DI 1 "register_operand" "r")
+		     (match_operand:DI 2 "arith_operand" "rI")))]
+  "TARGET_64BIT && TARGET_BITMANIP"
+  "ror%i2\t%0,%1,%2"
+  [(set_attr "type" "bitmanip")])
+
+(define_insn "rotlsi3"
+  [(set (match_operand:SI 0 "register_operand" "=r")
+	(rotate:SI (match_operand:SI 1 "register_operand" "r")
+		   (match_operand:SI 2 "register_operand" "r")))]
+  "TARGET_BITMANIP"
+  { return TARGET_64BIT ? "rolw\t%0,%1,%2" : "rol\t%0,%1,%2"; }
+  [(set_attr "type" "bitmanip")])
+
+(define_insn "rotldi3"
+  [(set (match_operand:DI 0 "register_operand" "=r")
+	(rotate:DI (match_operand:DI 1 "register_operand" "r")
+		   (match_operand:DI 2 "register_operand" "r")))]
+  "TARGET_BITMANIP"
+  "rol\t%0,%1,%2"
+  [(set_attr "type" "bitmanip")])
+
+;;; ??? grev
+
+;;; ??? assembler doesn't accept rev8
+(define_insn "bswapsi2"
+  [(set (match_operand:SI 0 "register_operand" "=r")
+	(bswap:SI (match_operand:SI 1 "register_operand" "r")))]
+  "TARGET_BITMANIP"
+  { return TARGET_64BIT ? "greviw\t%0,%1,0x18" : "grevi\t%0,%1,0x18"; }
+  [(set_attr "type" "bitmanip")])
+
+;;; ??? assembler doesn't accept rev8
+(define_insn "bswapdi2"
+  [(set (match_operand:SI 0 "register_operand" "=r")
+	(bswap:SI (match_operand:SI 1 "register_operand" "r")))]
+  "TARGET_64BIT && TARGET_BITMANIP"
+  "grevi\t%0,%1,0x38"
+  [(set_attr "type" "bitmanip")])
+
+;;; ??? shfl/unshfl
+
+;;; ??? bext/bdep
+
+;;; ??? clmul
+
+;;; ??? crc
+
+;;; ??? bmat
+
+(define_insn "*cmix"
+  [(set (match_operand:X 0 "register_operand" "=r")
+	(xor:X (and:X (xor:X (match_operand:X 1 "register_operand" "r")
+			     (match_operand:X 3 "register_operand" "r"))
+		      (match_operand:X 2 "register_operand" "r"))
+	       (match_dup 3)))]
+  "TARGET_BITMANIP"
+  "cmix\t%0,%2,%1,%3"
+  [(set_attr "type" "bitmanip")])
+
+;;; ??? cmov
+
+;;; ??? fs[lr]
+
+(define_insn "*addwu"
+  [(set (match_operand:DI 0 "register_operand" "=r")
+	(zero_extend:DI (plus:SI (match_operand:SI 1 "register_operand" "r")
+				 (match_operand:SI 2 "arith_operand" "rI"))))]
+  "TARGET_64BIT && TARGET_BITMANIP"
+  "add%i2wu\t%0,%1,%2"
+  [(set_attr "type" "bitmanip")])
+
+(define_insn "*subwu"
+  [(set (match_operand:DI 0 "register_operand" "=r")
+	(zero_extend:DI (minus:SI (match_operand:SI 1 "register_operand" "r")
+				  (match_operand:SI 2 "register_operand" "r"))))]
+  "TARGET_64BIT && TARGET_BITMANIP"
+  "subwu\t%0,%1,%2"
+  [(set_attr "type" "bitmanip")])
+
+(define_insn "*addu.w"
+  [(set (match_operand:DI 0 "register_operand" "=r")
+	(plus:DI (zero_extend:DI
+		  (subreg:SI (match_operand:DI 2 "register_operand" "r") 0))
+		 (match_operand:DI 1 "register_operand" "r")))]
+  "TARGET_BITMANIP"
+  "addu.w\t%0,%1,%2"
+  [(set_attr "type" "bitmanip")])
+
+(define_insn "*subu.w"
+  [(set (match_operand:DI 0 "register_operand" "=r")
+	(minus:DI (match_operand:DI 1 "register_operand" "r")
+		  (zero_extend:DI
+		   (subreg:SI (match_operand:DI 2 "register_operand" "r") 0))))]
+  "TARGET_BITMANIP"
+  "subu.w\t%0,%1,%2"
+  [(set_attr "type" "bitmanip")])
+
+;; GCC canonicalizes this to (i << 10) & 0x3fffffffc00, and then we need 3
+;; instructions to load the constant, but we should be able to do it in 2.
+;; Without a constant loading fix, this is a 5 instruction sequence which
+;; is too many to combine.  With a constant loading fix we might be able to
+;; match in combine.
+
+;;(define_insn "*slliuw"
+;;  [(set (match_operand:DI 0 "register_operand" "=r")
+;;	(ashift:DI (zero_extend:DI
+;;		    (subreg:SI (match_operand:DI 1 "register_operand" "r") 0))
+;;		   (match_operand:QI 2 "immediate_operand" "I")))]
+;;  "TARGET_BITMANIP"
+;;  "slliu.w\t%0,%1,%2"
+;;  [(set_attr "type" "bitmanip")])
+
+;; ??? bfxp
diff --git a/gcc/config/riscv/riscv-builtins.c b/gcc/config/riscv/riscv-builtins.c
index 548267179..fb1a36197 100644
--- a/gcc/config/riscv/riscv-builtins.c
+++ b/gcc/config/riscv/riscv-builtins.c
@@ -84,6 +84,7 @@ struct riscv_builtin_description {
   unsigned int (*avail) (void);
 };
 
+AVAIL (bitmanip64, TARGET_64BIT && TARGET_BITMANIP)
 AVAIL (hard_float, TARGET_HARD_FLOAT)
 
 /* Construct a riscv_builtin_description from the given arguments.
@@ -118,6 +119,7 @@ AVAIL (hard_float, TARGET_HARD_FLOAT)
 /* Argument types.  */
 #define RISCV_ATYPE_VOID void_type_node
 #define RISCV_ATYPE_USI unsigned_intSI_type_node
+#define RISCV_ATYPE_SI intSI_type_node
 
 /* RISCV_FTYPE_ATYPESN takes N RISCV_FTYPES-like type codes and lists
    their associated RISCV_ATYPEs.  */
@@ -125,6 +127,7 @@ AVAIL (hard_float, TARGET_HARD_FLOAT)
   RISCV_ATYPE_##A, RISCV_ATYPE_##B
 
 static const struct riscv_builtin_description riscv_builtins[] = {
+  DIRECT_BUILTIN (pcntw, RISCV_SI_FTYPE_SI, bitmanip64),
   DIRECT_BUILTIN (frflags, RISCV_USI_FTYPE_VOID, hard_float),
   DIRECT_NO_TARGET_BUILTIN (fsflags, RISCV_VOID_FTYPE_USI, hard_float)
 };
diff --git a/gcc/config/riscv/riscv-ftypes.def b/gcc/config/riscv/riscv-ftypes.def
index eefe3033e..f91dac7d2 100644
--- a/gcc/config/riscv/riscv-ftypes.def
+++ b/gcc/config/riscv/riscv-ftypes.def
@@ -28,3 +28,4 @@ along with GCC; see the file COPYING3.  If not see
 
 DEF_RISCV_FTYPE (1, (USI, VOID))
 DEF_RISCV_FTYPE (1, (VOID, USI))
+DEF_RISCV_FTYPE (1, (SI, SI))
diff --git a/gcc/config/riscv/riscv.h b/gcc/config/riscv/riscv.h
index c93743f95..9e881c5d4 100644
--- a/gcc/config/riscv/riscv.h
+++ b/gcc/config/riscv/riscv.h
@@ -664,6 +664,13 @@ typedef struct {
 
 #define LOGICAL_OP_NON_SHORT_CIRCUIT 0
 
+/* Configure CLZ/CTZ behavior. */
+
+#define CLZ_DEFINED_VALUE_AT_ZERO(MODE, VALUE) \
+  ((VALUE) = GET_MODE_UNIT_BITSIZE (MODE), 2)
+#define CTZ_DEFINED_VALUE_AT_ZERO(MODE, VALUE) \
+  ((VALUE) = GET_MODE_UNIT_BITSIZE (MODE), 2)
+
 /* Control the assembler format that we output.  */
 
 /* Output to assembler file text saying following lines
diff --git a/gcc/config/riscv/riscv.md b/gcc/config/riscv/riscv.md
index e3799a5bd..400fd23f1 100644
--- a/gcc/config/riscv/riscv.md
+++ b/gcc/config/riscv/riscv.md
@@ -43,6 +43,9 @@
   UNSPEC_LRINT
   UNSPEC_LROUND
 
+  ;; Bitmanip
+  UNSPEC_PCNTW
+
   ;; Stack tie
   UNSPEC_TIE
 ])
@@ -156,7 +159,7 @@
 (define_attr "type"
   "unknown,branch,jump,call,load,fpload,store,fpstore,
    mtc,mfc,const,arith,logical,shift,slt,imul,idiv,move,fmove,fadd,fmul,
-   fmadd,fdiv,fcmp,fcvt,fsqrt,multi,auipc,nop,ghost"
+   fmadd,fdiv,fcmp,fcvt,fsqrt,multi,auipc,nop,ghost,bitmanip"
   (cond [(eq_attr "got" "load") (const_string "load")
 
 	 ;; If a doubleword move uses these expensive instructions,
@@ -1043,11 +1046,15 @@
 
 ;; Extension insns.
 
-(define_insn_and_split "zero_extendsidi2"
+;;(define_expand "zero_extendsidi2"
+;;  [(set (match_operand:DI 0 "register_operand")
+;;	(zero_extend:DI (match_operand:SI 1 "nonimmediate_operand")))])
+
+(define_insn_and_split "*zero_extendsidi2" ;; XXX "*zero_extendsidi2_internal"
   [(set (match_operand:DI     0 "register_operand"     "=r,r")
 	(zero_extend:DI
 	    (match_operand:SI 1 "nonimmediate_operand" " r,m")))]
-  "TARGET_64BIT"
+  "TARGET_64BIT" ;; XXX "TARGET_64BIT && !TARGET_BITMANIP"
   "@
    #
    lwu\t%0,%1"
@@ -1060,11 +1067,15 @@
   [(set_attr "move_type" "shift_shift,load")
    (set_attr "mode" "DI")])
 
-(define_insn_and_split "zero_extendhi<GPR:mode>2"
+;;(define_expand "zero_extendhi<GPR:mode>2"
+;;  [(set (match_operand:GPR 0 "register_operand")
+;;	(zero_extend:GPR (match_operand:HI 1 "nonimmediate_operand")))])
+
+(define_insn_and_split "*zero_extendhi<GPR:mode>2" ;; XXX "*zero_extendhi<GPR:mode>2_internal"
   [(set (match_operand:GPR    0 "register_operand"     "=r,r")
 	(zero_extend:GPR
 	    (match_operand:HI 1 "nonimmediate_operand" " r,m")))]
-  ""
+  "" ;; XXX "!TARGET_BITMANIP"
   "@
    #
    lhu\t%0,%1"
@@ -2389,6 +2400,14 @@
   ""
   "")
 
+(define_insn "riscv_pcntw"
+  [(set (match_operand:SI 0 "register_operand" "=r")
+	(unspec
+	    [(match_operand:SI 1 "register_operand" "r")]
+	    UNSPEC_PCNTW))]
+  ""
+  "pcntw\t%0,%1")
+
 (define_insn "riscv_frflags"
   [(set (match_operand:SI 0 "register_operand" "=r")
 	(unspec_volatile [(const_int 0)] UNSPECV_FRFLAGS))]
@@ -2450,3 +2469,4 @@
 (include "pic.md")
 (include "generic.md")
 (include "sifive-7.md")
+(include "bitmanip.md")
diff --git a/gcc/config/riscv/riscv.opt b/gcc/config/riscv/riscv.opt
index 3b25f9a10..2be866d20 100644
--- a/gcc/config/riscv/riscv.opt
+++ b/gcc/config/riscv/riscv.opt
@@ -118,6 +118,8 @@ Mask(64BIT)
 
 Mask(MUL)
 
+Mask(BITMANIP)
+
 Mask(ATOMIC)
 
 Mask(HARD_FLOAT)
